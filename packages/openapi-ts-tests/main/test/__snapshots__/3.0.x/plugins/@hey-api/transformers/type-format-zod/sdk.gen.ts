// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Client, TDataShape } from './client';
import type { PostFooData, PostFooResponses } from './types.gen';
import { zPostFooData, zPostFooResponse } from './zod.gen';
import { postFooResponseTransformer } from './transformers.gen';
import { client } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const postFoo = <ThrowOnError extends boolean = false>(options?: Options<PostFooData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostFooResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zPostFooData.parseAsync(data);
        },
        responseTransformer: postFooResponseTransformer,
        responseValidator: async (data) => {
            return await zPostFooResponse.parseAsync(data);
        },
        url: '/foo',
        ...options
    });
};
