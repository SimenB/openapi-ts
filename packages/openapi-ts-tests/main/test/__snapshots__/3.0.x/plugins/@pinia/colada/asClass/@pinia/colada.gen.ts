// This file is auto-generated by @hey-api/openapi-ts

import { type Options, FooBazService, BarBazService } from '../sdk.gen';
import { type UseQueryOptions, defineQueryOptions, type UseMutationOptions } from '@pinia/colada';
import type { GetFooData, FooPostData, FooPostResponse, FooPutData, FooPutResponse, GetFooBarData, FooBarPostData, FooBarPostResponse, FooBarPutData, FooBarPutResponse } from '../types.gen';
import { client } from '../client.gen';

export const getFooQuery = defineQueryOptions({
    key: [
        'getFoo'
    ],
    query: async () => {
        const { data } = await FooBazService.getFoo({ throwOnError: true });
        return data;
    }
});

export const fooPostMutation = (options?: Partial<Options<FooPostData>>): UseMutationOptions<FooPostResponse, Options<FooPostData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await FooBazService.fooService.post({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const fooPutMutation = (options?: Partial<Options<FooPutData>>): UseMutationOptions<FooPutResponse, Options<FooPutData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await FooBazService.fooService.put({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const getFooBarQuery = defineQueryOptions({
    key: [
        'getFooBar'
    ],
    query: async () => {
        const { data } = await BarBazService.getFooBar({ throwOnError: true });
        return data;
    }
});

export const fooBarPostMutation = (options?: Partial<Options<FooBarPostData>>): UseMutationOptions<FooBarPostResponse, Options<FooBarPostData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await FooBazService.fooService.barService.post({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const fooBarPutMutation = (options?: Partial<Options<FooBarPutData>>): UseMutationOptions<FooBarPutResponse, Options<FooBarPutData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await FooBazService.fooService.barService.put({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};
