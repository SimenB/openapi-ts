// This file is auto-generated by @hey-api/openapi-ts

import { type _JSONValue, defineQueryOptions, type UseMutationOptions } from '@pinia/colada';

import { client, serializeQueryKeyValue } from '../client.gen';
import { BarBazService, FooBazService, type Options } from '../sdk.gen';
import type { FooBarPostData, FooBarPostResponse, FooBarPutData, FooBarPutResponse, FooPostData, FooPostResponse, FooPutData, FooPutResponse, GetFooBarData, GetFooData } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'path' | 'query'> & {
        _id: string;
        baseUrl?: _JSONValue;
        body?: _JSONValue;
        query?: _JSONValue;
        tags?: _JSONValue;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (tags) {
        params.tags = tags as unknown as _JSONValue;
    }
    if (options?.body !== undefined) {
        const normalizedBody = serializeQueryKeyValue(options.body);
        if (normalizedBody !== undefined) {
            params.body = normalizedBody;
        }
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query !== undefined) {
        const normalizedQuery = serializeQueryKeyValue(options.query);
        if (normalizedQuery !== undefined) {
            params.query = normalizedQuery;
        }
    }
    return [
        params
    ];
};

export const getFooQueryKey = (options?: Options<GetFooData>) => createQueryKey('getFoo', options);

export const getFooQuery = defineQueryOptions((options?: Options<GetFooData>) => ({
    key: getFooQueryKey(options),
    query: async (context) => {
        const { data } = await FooBazService.getFoo({
            ...options,
            ...context,
            throwOnError: true
        });
        return data;
    }
}));

export const fooPostMutation = (options?: Partial<Options<FooPostData>>): UseMutationOptions<FooPostResponse, Options<FooPostData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await FooBazService.fooService.post({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const fooPutMutation = (options?: Partial<Options<FooPutData>>): UseMutationOptions<FooPutResponse, Options<FooPutData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await FooBazService.fooService.put({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const getFooBarQueryKey = (options?: Options<GetFooBarData>) => createQueryKey('getFooBar', options);

export const getFooBarQuery = defineQueryOptions((options?: Options<GetFooBarData>) => ({
    key: getFooBarQueryKey(options),
    query: async (context) => {
        const { data } = await BarBazService.getFooBar({
            ...options,
            ...context,
            throwOnError: true
        });
        return data;
    }
}));

export const fooBarPostMutation = (options?: Partial<Options<FooBarPostData>>): UseMutationOptions<FooBarPostResponse, Options<FooBarPostData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await FooBazService.fooService.barService.post({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const fooBarPutMutation = (options?: Partial<Options<FooBarPutData>>): UseMutationOptions<FooBarPutResponse, Options<FooBarPutData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await FooBazService.fooService.barService.put({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};
