// This file is auto-generated by @hey-api/openapi-ts

import { type _JSONValue, defineQueryOptions, type UseMutationOptions } from '@pinia/colada';

import { client } from '../client.gen';
import { serializeQueryKeyValue } from '../core/queryKeySerializer.gen';
import { apiVVersionODataControllerCount, callToTestOrderOfParams, callWithDefaultOptionalParameters, callWithDefaultParameters, callWithDescriptions, callWithDuplicateResponses, callWithNoContentResponse, callWithParameters, callWithResponse, callWithResponseAndNoContentResponse, callWithResponses, callWithResultFromHeader, callWithWeirdParameterNames, collectionFormat, complexParams, complexTypes, deleteCallWithoutParametersAndResponse, deleteFoo, deprecatedCall, dummyA, dummyB, duplicateName, duplicateName2, duplicateName3, duplicateName4, export_, fileResponse, fooWow, getApiVbyApiVersionSimpleOperation, getCallWithOptionalParam, getCallWithoutParametersAndResponse, import_, multipartRequest, multipartResponse, nonAsciiæøåÆøÅöôêÊ字符串, type Options, patchApiVbyApiVersionNoTag, patchCallWithoutParametersAndResponse, postApiVbyApiVersionFormData, postApiVbyApiVersionRequestBody, postCallWithOptionalParam, postCallWithoutParametersAndResponse, putCallWithoutParametersAndResponse, putWithFormUrlEncoded, testErrorCode, types, uploadFile } from '../sdk.gen';
import type { ApiVVersionODataControllerCountData, CallToTestOrderOfParamsData, CallWithDefaultOptionalParametersData, CallWithDefaultParametersData, CallWithDescriptionsData, CallWithDuplicateResponsesData, CallWithDuplicateResponsesError, CallWithDuplicateResponsesResponse, CallWithNoContentResponseData, CallWithParametersData, CallWithResponseAndNoContentResponseData, CallWithResponseData, CallWithResponsesData, CallWithResponsesError, CallWithResponsesResponse, CallWithResultFromHeaderData, CallWithWeirdParameterNamesData, CollectionFormatData, ComplexParamsData, ComplexParamsResponse, ComplexTypesData, DeleteCallWithoutParametersAndResponseData, DeleteFooData3, DeprecatedCallData, DummyAData, DummyBData, DuplicateName2Data, DuplicateName3Data, DuplicateName4Data, DuplicateNameData, ExportData, FileResponseData, FooWowData, GetApiVbyApiVersionSimpleOperationData, GetCallWithOptionalParamData, GetCallWithoutParametersAndResponseData, ImportData, ImportResponse, MultipartRequestData, MultipartResponseData, NonAsciiæøåÆøÅöôêÊ字符串Data, NonAsciiæøåÆøÅöôêÊ字符串Response, PatchApiVbyApiVersionNoTagData, PatchCallWithoutParametersAndResponseData, PostApiVbyApiVersionFormDataData, PostApiVbyApiVersionRequestBodyData, PostCallWithOptionalParamData, PostCallWithOptionalParamResponse, PostCallWithoutParametersAndResponseData, PutCallWithoutParametersAndResponseData, PutWithFormUrlEncodedData, TestErrorCodeData, TypesData, UploadFileData, UploadFileResponse } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'path' | 'query'> & {
        _id: string;
        baseUrl?: _JSONValue;
        body?: _JSONValue;
        query?: _JSONValue;
        tags?: _JSONValue;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (tags) {
        params.tags = tags as unknown as _JSONValue;
    }
    if (options?.body !== undefined) {
        const normalizedBody = serializeQueryKeyValue(options.body);
        if (normalizedBody !== undefined) {
            params.body = normalizedBody;
        }
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query !== undefined) {
        const normalizedQuery = serializeQueryKeyValue(options.query);
        if (normalizedQuery !== undefined) {
            params.query = normalizedQuery;
        }
    }
    return [
        params
    ];
};

export const exportQueryKey = (options?: Options<ExportData>) => createQueryKey('export', options);

export const exportQuery = defineQueryOptions((options?: Options<ExportData>) => ({
    key: exportQueryKey(options),
    query: async (context) => {
        const { data } = await export_({
            ...options,
            ...context,
            throwOnError: true
        });
        return data;
    }
}));

export const patchApiVbyApiVersionNoTagMutation = (options?: Partial<Options<PatchApiVbyApiVersionNoTagData>>): UseMutationOptions<unknown, Options<PatchApiVbyApiVersionNoTagData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await patchApiVbyApiVersionNoTag({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const importMutation = (options?: Partial<Options<ImportData>>): UseMutationOptions<ImportResponse, Options<ImportData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await import_({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const fooWowMutation = (options?: Partial<Options<FooWowData>>): UseMutationOptions<unknown, Options<FooWowData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await fooWow({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const apiVVersionODataControllerCountQueryKey = (options?: Options<ApiVVersionODataControllerCountData>) => createQueryKey('apiVVersionODataControllerCount', options);

export const apiVVersionODataControllerCountQuery = defineQueryOptions((options?: Options<ApiVVersionODataControllerCountData>) => ({
    key: apiVVersionODataControllerCountQueryKey(options),
    query: async (context) => {
        const { data } = await apiVVersionODataControllerCount({
            ...options,
            ...context,
            throwOnError: true
        });
        return data;
    }
}));

export const getApiVbyApiVersionSimpleOperationQueryKey = (options: Options<GetApiVbyApiVersionSimpleOperationData>) => createQueryKey('getApiVbyApiVersionSimpleOperation', options);

export const getApiVbyApiVersionSimpleOperationQuery = defineQueryOptions((options: Options<GetApiVbyApiVersionSimpleOperationData>) => ({
    key: getApiVbyApiVersionSimpleOperationQueryKey(options),
    query: async (context) => {
        const { data } = await getApiVbyApiVersionSimpleOperation({
            ...options,
            ...context,
            throwOnError: true
        });
        return data;
    }
}));

export const deleteCallWithoutParametersAndResponseMutation = (options?: Partial<Options<DeleteCallWithoutParametersAndResponseData>>): UseMutationOptions<unknown, Options<DeleteCallWithoutParametersAndResponseData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await deleteCallWithoutParametersAndResponse({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const getCallWithoutParametersAndResponseQueryKey = (options?: Options<GetCallWithoutParametersAndResponseData>) => createQueryKey('getCallWithoutParametersAndResponse', options);

export const getCallWithoutParametersAndResponseQuery = defineQueryOptions((options?: Options<GetCallWithoutParametersAndResponseData>) => ({
    key: getCallWithoutParametersAndResponseQueryKey(options),
    query: async (context) => {
        const { data } = await getCallWithoutParametersAndResponse({
            ...options,
            ...context,
            throwOnError: true
        });
        return data;
    }
}));

export const patchCallWithoutParametersAndResponseMutation = (options?: Partial<Options<PatchCallWithoutParametersAndResponseData>>): UseMutationOptions<unknown, Options<PatchCallWithoutParametersAndResponseData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await patchCallWithoutParametersAndResponse({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const postCallWithoutParametersAndResponseMutation = (options?: Partial<Options<PostCallWithoutParametersAndResponseData>>): UseMutationOptions<unknown, Options<PostCallWithoutParametersAndResponseData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await postCallWithoutParametersAndResponse({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const putCallWithoutParametersAndResponseMutation = (options?: Partial<Options<PutCallWithoutParametersAndResponseData>>): UseMutationOptions<unknown, Options<PutCallWithoutParametersAndResponseData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await putCallWithoutParametersAndResponse({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const deleteFooMutation = (options?: Partial<Options<DeleteFooData3>>): UseMutationOptions<unknown, Options<DeleteFooData3>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await deleteFoo({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithDescriptionsMutation = (options?: Partial<Options<CallWithDescriptionsData>>): UseMutationOptions<unknown, Options<CallWithDescriptionsData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithDescriptions({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

/**
 * @deprecated
 */
export const deprecatedCallMutation = (options?: Partial<Options<DeprecatedCallData>>): UseMutationOptions<unknown, Options<DeprecatedCallData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await deprecatedCall({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithParametersMutation = (options?: Partial<Options<CallWithParametersData>>): UseMutationOptions<unknown, Options<CallWithParametersData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithParameters({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithWeirdParameterNamesMutation = (options?: Partial<Options<CallWithWeirdParameterNamesData>>): UseMutationOptions<unknown, Options<CallWithWeirdParameterNamesData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithWeirdParameterNames({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const getCallWithOptionalParamQueryKey = (options: Options<GetCallWithOptionalParamData>) => createQueryKey('getCallWithOptionalParam', options);

export const getCallWithOptionalParamQuery = defineQueryOptions((options: Options<GetCallWithOptionalParamData>) => ({
    key: getCallWithOptionalParamQueryKey(options),
    query: async (context) => {
        const { data } = await getCallWithOptionalParam({
            ...options,
            ...context,
            throwOnError: true
        });
        return data;
    }
}));

export const postCallWithOptionalParamMutation = (options?: Partial<Options<PostCallWithOptionalParamData>>): UseMutationOptions<PostCallWithOptionalParamResponse, Options<PostCallWithOptionalParamData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await postCallWithOptionalParam({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const postApiVbyApiVersionRequestBodyMutation = (options?: Partial<Options<PostApiVbyApiVersionRequestBodyData>>): UseMutationOptions<unknown, Options<PostApiVbyApiVersionRequestBodyData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await postApiVbyApiVersionRequestBody({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const postApiVbyApiVersionFormDataMutation = (options?: Partial<Options<PostApiVbyApiVersionFormDataData>>): UseMutationOptions<unknown, Options<PostApiVbyApiVersionFormDataData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await postApiVbyApiVersionFormData({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithDefaultParametersQueryKey = (options?: Options<CallWithDefaultParametersData>) => createQueryKey('callWithDefaultParameters', options);

export const callWithDefaultParametersQuery = defineQueryOptions((options?: Options<CallWithDefaultParametersData>) => ({
    key: callWithDefaultParametersQueryKey(options),
    query: async (context) => {
        const { data } = await callWithDefaultParameters({
            ...options,
            ...context,
            throwOnError: true
        });
        return data;
    }
}));

export const callWithDefaultOptionalParametersMutation = (options?: Partial<Options<CallWithDefaultOptionalParametersData>>): UseMutationOptions<unknown, Options<CallWithDefaultOptionalParametersData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithDefaultOptionalParameters({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callToTestOrderOfParamsMutation = (options?: Partial<Options<CallToTestOrderOfParamsData>>): UseMutationOptions<unknown, Options<CallToTestOrderOfParamsData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callToTestOrderOfParams({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const duplicateNameMutation = (options?: Partial<Options<DuplicateNameData>>): UseMutationOptions<unknown, Options<DuplicateNameData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await duplicateName({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const duplicateName2QueryKey = (options?: Options<DuplicateName2Data>) => createQueryKey('duplicateName2', options);

export const duplicateName2Query = defineQueryOptions((options?: Options<DuplicateName2Data>) => ({
    key: duplicateName2QueryKey(options),
    query: async (context) => {
        const { data } = await duplicateName2({
            ...options,
            ...context,
            throwOnError: true
        });
        return data;
    }
}));

export const duplicateName3Mutation = (options?: Partial<Options<DuplicateName3Data>>): UseMutationOptions<unknown, Options<DuplicateName3Data>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await duplicateName3({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const duplicateName4Mutation = (options?: Partial<Options<DuplicateName4Data>>): UseMutationOptions<unknown, Options<DuplicateName4Data>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await duplicateName4({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithNoContentResponseQueryKey = (options?: Options<CallWithNoContentResponseData>) => createQueryKey('callWithNoContentResponse', options);

export const callWithNoContentResponseQuery = defineQueryOptions((options?: Options<CallWithNoContentResponseData>) => ({
    key: callWithNoContentResponseQueryKey(options),
    query: async (context) => {
        const { data } = await callWithNoContentResponse({
            ...options,
            ...context,
            throwOnError: true
        });
        return data;
    }
}));

export const callWithResponseAndNoContentResponseQueryKey = (options?: Options<CallWithResponseAndNoContentResponseData>) => createQueryKey('callWithResponseAndNoContentResponse', options);

export const callWithResponseAndNoContentResponseQuery = defineQueryOptions((options?: Options<CallWithResponseAndNoContentResponseData>) => ({
    key: callWithResponseAndNoContentResponseQueryKey(options),
    query: async (context) => {
        const { data } = await callWithResponseAndNoContentResponse({
            ...options,
            ...context,
            throwOnError: true
        });
        return data;
    }
}));

export const dummyAQueryKey = (options?: Options<DummyAData>) => createQueryKey('dummyA', options);

export const dummyAQuery = defineQueryOptions((options?: Options<DummyAData>) => ({
    key: dummyAQueryKey(options),
    query: async (context) => {
        const { data } = await dummyA({
            ...options,
            ...context,
            throwOnError: true
        });
        return data;
    }
}));

export const dummyBQueryKey = (options?: Options<DummyBData>) => createQueryKey('dummyB', options);

export const dummyBQuery = defineQueryOptions((options?: Options<DummyBData>) => ({
    key: dummyBQueryKey(options),
    query: async (context) => {
        const { data } = await dummyB({
            ...options,
            ...context,
            throwOnError: true
        });
        return data;
    }
}));

export const callWithResponseQueryKey = (options?: Options<CallWithResponseData>) => createQueryKey('callWithResponse', options);

export const callWithResponseQuery = defineQueryOptions((options?: Options<CallWithResponseData>) => ({
    key: callWithResponseQueryKey(options),
    query: async (context) => {
        const { data } = await callWithResponse({
            ...options,
            ...context,
            throwOnError: true
        });
        return data;
    }
}));

export const callWithDuplicateResponsesMutation = (options?: Partial<Options<CallWithDuplicateResponsesData>>): UseMutationOptions<CallWithDuplicateResponsesResponse, Options<CallWithDuplicateResponsesData>, CallWithDuplicateResponsesError> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithDuplicateResponses({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithResponsesMutation = (options?: Partial<Options<CallWithResponsesData>>): UseMutationOptions<CallWithResponsesResponse, Options<CallWithResponsesData>, CallWithResponsesError> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithResponses({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const collectionFormatQueryKey = (options: Options<CollectionFormatData>) => createQueryKey('collectionFormat', options);

export const collectionFormatQuery = defineQueryOptions((options: Options<CollectionFormatData>) => ({
    key: collectionFormatQueryKey(options),
    query: async (context) => {
        const { data } = await collectionFormat({
            ...options,
            ...context,
            throwOnError: true
        });
        return data;
    }
}));

export const typesQueryKey = (options: Options<TypesData>) => createQueryKey('types', options);

export const typesQuery = defineQueryOptions((options: Options<TypesData>) => ({
    key: typesQueryKey(options),
    query: async (context) => {
        const { data } = await types({
            ...options,
            ...context,
            throwOnError: true
        });
        return data;
    }
}));

export const uploadFileMutation = (options?: Partial<Options<UploadFileData>>): UseMutationOptions<UploadFileResponse, Options<UploadFileData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await uploadFile({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const fileResponseQueryKey = (options: Options<FileResponseData>) => createQueryKey('fileResponse', options);

export const fileResponseQuery = defineQueryOptions((options: Options<FileResponseData>) => ({
    key: fileResponseQueryKey(options),
    query: async (context) => {
        const { data } = await fileResponse({
            ...options,
            ...context,
            throwOnError: true
        });
        return data;
    }
}));

export const complexTypesQueryKey = (options: Options<ComplexTypesData>) => createQueryKey('complexTypes', options);

export const complexTypesQuery = defineQueryOptions((options: Options<ComplexTypesData>) => ({
    key: complexTypesQueryKey(options),
    query: async (context) => {
        const { data } = await complexTypes({
            ...options,
            ...context,
            throwOnError: true
        });
        return data;
    }
}));

export const multipartResponseQueryKey = (options?: Options<MultipartResponseData>) => createQueryKey('multipartResponse', options);

export const multipartResponseQuery = defineQueryOptions((options?: Options<MultipartResponseData>) => ({
    key: multipartResponseQueryKey(options),
    query: async (context) => {
        const { data } = await multipartResponse({
            ...options,
            ...context,
            throwOnError: true
        });
        return data;
    }
}));

export const multipartRequestMutation = (options?: Partial<Options<MultipartRequestData>>): UseMutationOptions<unknown, Options<MultipartRequestData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await multipartRequest({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const complexParamsMutation = (options?: Partial<Options<ComplexParamsData>>): UseMutationOptions<ComplexParamsResponse, Options<ComplexParamsData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await complexParams({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithResultFromHeaderMutation = (options?: Partial<Options<CallWithResultFromHeaderData>>): UseMutationOptions<unknown, Options<CallWithResultFromHeaderData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithResultFromHeader({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const testErrorCodeMutation = (options?: Partial<Options<TestErrorCodeData>>): UseMutationOptions<unknown, Options<TestErrorCodeData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await testErrorCode({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const nonAsciiæøåÆøÅöôêÊ字符串Mutation = (options?: Partial<Options<NonAsciiæøåÆøÅöôêÊ字符串Data>>): UseMutationOptions<NonAsciiæøåÆøÅöôêÊ字符串Response, Options<NonAsciiæøåÆøÅöôêÊ字符串Data>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await nonAsciiæøåÆøÅöôêÊ字符串({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

/**
 * Login User
 */
export const putWithFormUrlEncodedMutation = (options?: Partial<Options<PutWithFormUrlEncodedData>>): UseMutationOptions<unknown, Options<PutWithFormUrlEncodedData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await putWithFormUrlEncoded({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};
