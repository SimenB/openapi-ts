// This file is auto-generated by @hey-api/openapi-ts

import { type UseMutationOptions, defineQueryOptions, type _JSONValue } from '@pinia/colada';
import { type Options, deleteFoo, callWithParameters, callWithWeirdParameterNames, getCallWithOptionalParam, postCallWithOptionalParam } from '../../sdk.gen';
import type { DeleteFooData3, CallWithParametersData, CallWithWeirdParameterNamesData, GetCallWithOptionalParamData, PostCallWithOptionalParamData, PostCallWithOptionalParamResponse } from '../../types.gen';
import { client as _heyApiClient } from '../../client.gen';

export const deleteFooMutation = (options?: Partial<Options<DeleteFooData3>>): UseMutationOptions<unknown, Options<DeleteFooData3>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await deleteFoo({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithParametersMutation = (options?: Partial<Options<CallWithParametersData>>): UseMutationOptions<unknown, Options<CallWithParametersData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithParameters({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithWeirdParameterNamesMutation = (options?: Partial<Options<CallWithWeirdParameterNamesData>>): UseMutationOptions<unknown, Options<CallWithWeirdParameterNamesData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithWeirdParameterNames({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'body' | 'path'> & {
        _id: string;
        baseUrl?: _JSONValue;
        headers?: _JSONValue;
        query?: _JSONValue;
        tags?: _JSONValue;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (tags) {
        params.tags = tags as unknown as _JSONValue;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers as unknown as _JSONValue;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query as unknown as _JSONValue;
    }
    return [
        params
    ];
};

export const getCallWithOptionalParamQuery = defineQueryOptions((options: Options<GetCallWithOptionalParamData>) => ({
    key: createQueryKey('getCallWithOptionalParam', options),
    query: async () => {
        const { data } = await getCallWithOptionalParam({
            ...options,
            throwOnError: true
        });
        return data;
    }
}));

export const postCallWithOptionalParamMutation = (options?: Partial<Options<PostCallWithOptionalParamData>>): UseMutationOptions<PostCallWithOptionalParamResponse, Options<PostCallWithOptionalParamData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await postCallWithOptionalParam({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};