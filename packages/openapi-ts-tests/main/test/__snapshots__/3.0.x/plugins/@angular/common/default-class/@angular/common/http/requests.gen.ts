// This file is auto-generated by @hey-api/openapi-ts

import type { HttpRequest } from '@angular/common/http';
import type { Options } from '../../../sdk.gen';
import type { ExportData, PatchApiVbyApiVersionNoTagData, ImportData, FooWowData, ApiVVersionODataControllerCountData, GetApiVbyApiVersionSimpleOperationData, DeleteCallWithoutParametersAndResponseData, GetCallWithoutParametersAndResponseData, HeadCallWithoutParametersAndResponseData, OptionsCallWithoutParametersAndResponseData, PatchCallWithoutParametersAndResponseData, PostCallWithoutParametersAndResponseData, PutCallWithoutParametersAndResponseData, DeleteFooData3 as DeleteFooData, CallWithDescriptionsData, DeprecatedCallData, CallWithParametersData, CallWithWeirdParameterNamesData, GetCallWithOptionalParamData, PostCallWithOptionalParamData, PostApiVbyApiVersionRequestBodyData, PostApiVbyApiVersionFormDataData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, DuplicateNameData, DuplicateName2Data, DuplicateName3Data, DuplicateName4Data, CallWithNoContentResponseData, CallWithResponseAndNoContentResponseData, DummyAData, DummyBData, CallWithResponseData, CallWithDuplicateResponsesData, CallWithResponsesData, CollectionFormatData, TypesData, UploadFileData, FileResponseData, ComplexTypesData, MultipartResponseData, MultipartRequestData, ComplexParamsData, CallWithResultFromHeaderData, TestErrorCodeData, NonAsciiæøåÆøÅöôêÊ字符串Data, PutWithFormUrlEncodedData } from '../../../types.gen';
import { client } from '../../../client.gen';
import { Injectable } from '@angular/core';

@Injectable({
    providedIn: 'root'
})
export class DefaultRequests {
    public export<ThrowOnError extends boolean = false>(options?: Options<ExportData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/no+tag',
            ...options
        });
    }
    
    public patchApiVbyApiVersionNoTag<ThrowOnError extends boolean = false>(options?: Options<PatchApiVbyApiVersionNoTagData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PATCH',
            url: '/api/v{api-version}/no+tag',
            ...options
        });
    }
    
    public import<ThrowOnError extends boolean = false>(options: Options<ImportData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/no+tag',
            ...options
        });
    }
    
    public fooWow<ThrowOnError extends boolean = false>(options?: Options<FooWowData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/no+tag',
            ...options
        });
    }
    
    public getApiVbyApiVersionSimpleOperation<ThrowOnError extends boolean = false>(options: Options<GetApiVbyApiVersionSimpleOperationData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/simple:operation',
            ...options
        });
    }
}

class ODataControllerRequests {
    public apiVVersionODataControllerCount<ThrowOnError extends boolean = false>(options?: Options<ApiVVersionODataControllerCountData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/simple/$count',
            ...options
        });
    }
}

class VVersionRequests {
    oDataController = new ODataControllerRequests();
}

class ApiRequests {
    vVersion = new VVersionRequests();
}

@Injectable({
    providedIn: 'root'
})
export class SimpleRequests {
    public deleteCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<DeleteCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'DELETE',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public getCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<GetCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public headCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<HeadCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'HEAD',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public optionsCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<OptionsCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'OPTIONS',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public patchCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<PatchCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PATCH',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public postCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<PostCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public putCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<PutCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    api = new ApiRequests();
}

@Injectable({
    providedIn: 'root'
})
export class ParametersRequests {
    public deleteFoo<ThrowOnError extends boolean = false>(options: Options<DeleteFooData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'DELETE',
            url: '/api/v{api-version}/foo/{foo_param}/bar/{BarParam}',
            ...options
        });
    }
    
    public callWithParameters<ThrowOnError extends boolean = false>(options: Options<CallWithParametersData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            ...options
        });
    }
    
    public callWithWeirdParameterNames<ThrowOnError extends boolean = false>(options: Options<CallWithWeirdParameterNamesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            ...options
        });
    }
    
    public getCallWithOptionalParam<ThrowOnError extends boolean = false>(options: Options<GetCallWithOptionalParamData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/parameters',
            ...options
        });
    }
    
    public postCallWithOptionalParam<ThrowOnError extends boolean = false>(options: Options<PostCallWithOptionalParamData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/parameters',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DescriptionsRequests {
    public callWithDescriptions<ThrowOnError extends boolean = false>(options?: Options<CallWithDescriptionsData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/descriptions',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DeprecatedRequests {
    /**
     * @deprecated
     */
    public deprecatedCall<ThrowOnError extends boolean = false>(options: Options<DeprecatedCallData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/parameters/deprecated',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class RequestBodyRequests {
    public postApiVbyApiVersionRequestBody<ThrowOnError extends boolean = false>(options?: Options<PostApiVbyApiVersionRequestBodyData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/requestBody',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class FormDataRequests {
    public postApiVbyApiVersionFormData<ThrowOnError extends boolean = false>(options?: Options<PostApiVbyApiVersionFormDataData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/formData',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DefaultsRequests {
    public callWithDefaultParameters<ThrowOnError extends boolean = false>(options?: Options<CallWithDefaultParametersData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/defaults',
            ...options
        });
    }
    
    public callWithDefaultOptionalParameters<ThrowOnError extends boolean = false>(options?: Options<CallWithDefaultOptionalParametersData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/defaults',
            ...options
        });
    }
    
    public callToTestOrderOfParams<ThrowOnError extends boolean = false>(options: Options<CallToTestOrderOfParamsData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/defaults',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DuplicateRequests {
    public duplicateName<ThrowOnError extends boolean = false>(options?: Options<DuplicateNameData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'DELETE',
            url: '/api/v{api-version}/duplicate',
            ...options
        });
    }
    
    public duplicateName2<ThrowOnError extends boolean = false>(options?: Options<DuplicateName2Data, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/duplicate',
            ...options
        });
    }
    
    public duplicateName3<ThrowOnError extends boolean = false>(options?: Options<DuplicateName3Data, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/duplicate',
            ...options
        });
    }
    
    public duplicateName4<ThrowOnError extends boolean = false>(options?: Options<DuplicateName4Data, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/duplicate',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class NoContentRequests {
    public callWithNoContentResponse<ThrowOnError extends boolean = false>(options?: Options<CallWithNoContentResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/no-content',
            ...options
        });
    }
    
    public callWithResponseAndNoContentResponse<ThrowOnError extends boolean = false>(options?: Options<CallWithResponseAndNoContentResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ResponseRequests {
    public callWithResponseAndNoContentResponse<ThrowOnError extends boolean = false>(options?: Options<CallWithResponseAndNoContentResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
            ...options
        });
    }
    
    public callWithResponse<ThrowOnError extends boolean = false>(options?: Options<CallWithResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/response',
            ...options
        });
    }
    
    public callWithDuplicateResponses<ThrowOnError extends boolean = false>(options?: Options<CallWithDuplicateResponsesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/response',
            ...options
        });
    }
    
    public callWithResponses<ThrowOnError extends boolean = false>(options?: Options<CallWithResponsesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/response',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags1Requests {
    public dummyA<ThrowOnError extends boolean = false>(options?: Options<DummyAData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
            ...options
        });
    }
    
    public dummyB<ThrowOnError extends boolean = false>(options?: Options<DummyBData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags2Requests {
    public dummyA<ThrowOnError extends boolean = false>(options?: Options<DummyAData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
            ...options
        });
    }
    
    public dummyB<ThrowOnError extends boolean = false>(options?: Options<DummyBData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags3Requests {
    public dummyB<ThrowOnError extends boolean = false>(options?: Options<DummyBData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class CollectionFormatRequests {
    public collectionFormat<ThrowOnError extends boolean = false>(options: Options<CollectionFormatData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/collectionFormat',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class TypesRequests {
    public types<ThrowOnError extends boolean = false>(options: Options<TypesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/types',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class UploadRequests {
    public uploadFile<ThrowOnError extends boolean = false>(options: Options<UploadFileData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/upload',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class FileResponseRequests {
    public fileResponse<ThrowOnError extends boolean = false>(options: Options<FileResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/file/{id}',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ComplexRequests {
    public complexTypes<ThrowOnError extends boolean = false>(options: Options<ComplexTypesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/complex',
            ...options
        });
    }
    
    public complexParams<ThrowOnError extends boolean = false>(options: Options<ComplexParamsData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/complex/{id}',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipartRequests {
    public multipartResponse<ThrowOnError extends boolean = false>(options?: Options<MultipartResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multipart',
            ...options
        });
    }
    
    public multipartRequest<ThrowOnError extends boolean = false>(options?: Options<MultipartRequestData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/multipart',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class HeaderRequests {
    public callWithResultFromHeader<ThrowOnError extends boolean = false>(options?: Options<CallWithResultFromHeaderData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/header',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ErrorRequests {
    public testErrorCode<ThrowOnError extends boolean = false>(options: Options<TestErrorCodeData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/error',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class NonAsciiÆøåÆøÅöôêÊRequests {
    public nonAsciiæøåÆøÅöôêÊ字符串<ThrowOnError extends boolean = false>(options: Options<NonAsciiæøåÆøÅöôêÊ字符串Data, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
            ...options
        });
    }
    
    /**
     * Login User
     */
    public putWithFormUrlEncoded<ThrowOnError extends boolean = false>(options: Options<PutWithFormUrlEncodedData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
            ...options
        });
    }
}
