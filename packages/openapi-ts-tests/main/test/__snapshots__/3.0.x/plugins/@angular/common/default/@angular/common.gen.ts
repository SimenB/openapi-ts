// This file is auto-generated by @hey-api/openapi-ts

import { type HttpRequest, httpResource } from '@angular/common/http';

import { client } from '../client.gen';
import type { Options } from '../sdk.gen';
import type { ApiVVersionODataControllerCountData, ApiVVersionODataControllerCountResponse, CallToTestOrderOfParamsData, CallWithDefaultOptionalParametersData, CallWithDefaultParametersData, CallWithDescriptionsData, CallWithDuplicateResponsesData, CallWithDuplicateResponsesResponse, CallWithNoContentResponseData, CallWithNoContentResponseResponse, CallWithParametersData, CallWithResponseAndNoContentResponseData, CallWithResponseAndNoContentResponseResponse, CallWithResponseData, CallWithResponseResponse, CallWithResponsesData, CallWithResponsesResponse, CallWithResultFromHeaderData, CallWithWeirdParameterNamesData, CollectionFormatData, ComplexParamsData, ComplexParamsResponse, ComplexTypesData, ComplexTypesResponse, DeleteCallWithoutParametersAndResponseData, DeleteFooData3, DeprecatedCallData, DummyAData, DummyAResponse, DummyBData, DummyBResponse, DuplicateName2Data, DuplicateName3Data, DuplicateName4Data, DuplicateNameData, ExportData, FileResponseData, FileResponseResponse, FooWowData, GetApiVbyApiVersionSimpleOperationData, GetApiVbyApiVersionSimpleOperationResponse, GetCallWithOptionalParamData, GetCallWithoutParametersAndResponseData, HeadCallWithoutParametersAndResponseData, ImportData, ImportResponse, MultipartRequestData, MultipartResponseData, MultipartResponseResponse, NonAsciiæøåÆøÅöôêÊ字符串Data, NonAsciiæøåÆøÅöôêÊ字符串Response, OptionsCallWithoutParametersAndResponseData, PatchApiVbyApiVersionNoTagData, PatchCallWithoutParametersAndResponseData, PostApiVbyApiVersionFormDataData, PostApiVbyApiVersionRequestBodyData, PostCallWithOptionalParamData, PostCallWithOptionalParamResponse, PostCallWithoutParametersAndResponseData, PutCallWithoutParametersAndResponseData, PutWithFormUrlEncodedData, TestErrorCodeData, TypesData, TypesResponse, UploadFileData, UploadFileResponse } from '../types.gen';

export const exportRequest = <ThrowOnError extends boolean = false>(options?: Options<ExportData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/no+tag',
        ...options
    });
};

export const patchApiVbyApiVersionNoTagRequest = <ThrowOnError extends boolean = false>(options?: Options<PatchApiVbyApiVersionNoTagData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'PATCH',
        url: '/api/v{api-version}/no+tag',
        ...options
    });
};

export const importRequest = <ThrowOnError extends boolean = false>(options: Options<ImportData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/no+tag',
        ...options
    });
};

export const fooWowRequest = <ThrowOnError extends boolean = false>(options?: Options<FooWowData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'PUT',
        url: '/api/v{api-version}/no+tag',
        ...options
    });
};

export const apiVVersionODataControllerCountRequest = <ThrowOnError extends boolean = false>(options?: Options<ApiVVersionODataControllerCountData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/simple/$count',
        ...options
    });
};

export const getApiVbyApiVersionSimpleOperationRequest = <ThrowOnError extends boolean = false>(options: Options<GetApiVbyApiVersionSimpleOperationData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/simple:operation',
        ...options
    });
};

export const deleteCallWithoutParametersAndResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<DeleteCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'DELETE',
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const getCallWithoutParametersAndResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<GetCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const headCallWithoutParametersAndResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<HeadCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'HEAD',
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const optionsCallWithoutParametersAndResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<OptionsCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'OPTIONS',
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const patchCallWithoutParametersAndResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<PatchCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'PATCH',
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const postCallWithoutParametersAndResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<PostCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const putCallWithoutParametersAndResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<PutCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'PUT',
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const deleteFooRequest = <ThrowOnError extends boolean = false>(options: Options<DeleteFooData3, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'DELETE',
        url: '/api/v{api-version}/foo/{foo_param}/bar/{BarParam}',
        ...options
    });
};

export const callWithDescriptionsRequest = <ThrowOnError extends boolean = false>(options?: Options<CallWithDescriptionsData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/descriptions',
        ...options
    });
};

/**
 * @deprecated
 */
export const deprecatedCallRequest = <ThrowOnError extends boolean = false>(options: Options<DeprecatedCallData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/parameters/deprecated',
        ...options
    });
};

export const callWithParametersRequest = <ThrowOnError extends boolean = false>(options: Options<CallWithParametersData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/parameters/{parameterPath}',
        ...options
    });
};

export const callWithWeirdParameterNamesRequest = <ThrowOnError extends boolean = false>(options: Options<CallWithWeirdParameterNamesData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
        ...options
    });
};

export const getCallWithOptionalParamRequest = <ThrowOnError extends boolean = false>(options: Options<GetCallWithOptionalParamData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/parameters',
        ...options
    });
};

export const postCallWithOptionalParamRequest = <ThrowOnError extends boolean = false>(options: Options<PostCallWithOptionalParamData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/parameters',
        ...options
    });
};

export const postApiVbyApiVersionRequestBodyRequest = <ThrowOnError extends boolean = false>(options?: Options<PostApiVbyApiVersionRequestBodyData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/requestBody',
        ...options
    });
};

export const postApiVbyApiVersionFormDataRequest = <ThrowOnError extends boolean = false>(options?: Options<PostApiVbyApiVersionFormDataData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/formData',
        ...options
    });
};

export const callWithDefaultParametersRequest = <ThrowOnError extends boolean = false>(options?: Options<CallWithDefaultParametersData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/defaults',
        ...options
    });
};

export const callWithDefaultOptionalParametersRequest = <ThrowOnError extends boolean = false>(options?: Options<CallWithDefaultOptionalParametersData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/defaults',
        ...options
    });
};

export const callToTestOrderOfParamsRequest = <ThrowOnError extends boolean = false>(options: Options<CallToTestOrderOfParamsData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'PUT',
        url: '/api/v{api-version}/defaults',
        ...options
    });
};

export const duplicateNameRequest = <ThrowOnError extends boolean = false>(options?: Options<DuplicateNameData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'DELETE',
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const duplicateName2Request = <ThrowOnError extends boolean = false>(options?: Options<DuplicateName2Data, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const duplicateName3Request = <ThrowOnError extends boolean = false>(options?: Options<DuplicateName3Data, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const duplicateName4Request = <ThrowOnError extends boolean = false>(options?: Options<DuplicateName4Data, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'PUT',
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const callWithNoContentResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<CallWithNoContentResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/no-content',
        ...options
    });
};

export const callWithResponseAndNoContentResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<CallWithResponseAndNoContentResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/multiple-tags/response-and-no-content',
        ...options
    });
};

export const dummyARequest = <ThrowOnError extends boolean = false>(options?: Options<DummyAData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/multiple-tags/a',
        ...options
    });
};

export const dummyBRequest = <ThrowOnError extends boolean = false>(options?: Options<DummyBData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/multiple-tags/b',
        ...options
    });
};

export const callWithResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<CallWithResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/response',
        ...options
    });
};

export const callWithDuplicateResponsesRequest = <ThrowOnError extends boolean = false>(options?: Options<CallWithDuplicateResponsesData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/response',
        ...options
    });
};

export const callWithResponsesRequest = <ThrowOnError extends boolean = false>(options?: Options<CallWithResponsesData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'PUT',
        url: '/api/v{api-version}/response',
        ...options
    });
};

export const collectionFormatRequest = <ThrowOnError extends boolean = false>(options: Options<CollectionFormatData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/collectionFormat',
        ...options
    });
};

export const typesRequest = <ThrowOnError extends boolean = false>(options: Options<TypesData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/types',
        ...options
    });
};

export const uploadFileRequest = <ThrowOnError extends boolean = false>(options: Options<UploadFileData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/upload',
        ...options
    });
};

export const fileResponseRequest = <ThrowOnError extends boolean = false>(options: Options<FileResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/file/{id}',
        ...options
    });
};

export const complexTypesRequest = <ThrowOnError extends boolean = false>(options: Options<ComplexTypesData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/complex',
        ...options
    });
};

export const multipartResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<MultipartResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/multipart',
        ...options
    });
};

export const multipartRequestRequest = <ThrowOnError extends boolean = false>(options?: Options<MultipartRequestData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/multipart',
        ...options
    });
};

export const complexParamsRequest = <ThrowOnError extends boolean = false>(options: Options<ComplexParamsData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'PUT',
        url: '/api/v{api-version}/complex/{id}',
        ...options
    });
};

export const callWithResultFromHeaderRequest = <ThrowOnError extends boolean = false>(options?: Options<CallWithResultFromHeaderData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/header',
        ...options
    });
};

export const testErrorCodeRequest = <ThrowOnError extends boolean = false>(options: Options<TestErrorCodeData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/error',
        ...options
    });
};

export const nonAsciiæøåÆøÅöôêÊ字符串Request = <ThrowOnError extends boolean = false>(options: Options<NonAsciiæøåÆøÅöôêÊ字符串Data, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
        ...options
    });
};

/**
 * Login User
 */
export const putWithFormUrlEncodedRequest = <ThrowOnError extends boolean = false>(options: Options<PutWithFormUrlEncodedData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'PUT',
        url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
        ...options
    });
};

export const exportResource = <ThrowOnError extends boolean = false>(options?: () => Options<ExportData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? exportRequest(opts) : undefined;
    });
};

export const patchApiVbyApiVersionNoTagResource = <ThrowOnError extends boolean = false>(options?: () => Options<PatchApiVbyApiVersionNoTagData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? patchApiVbyApiVersionNoTagRequest(opts) : undefined;
    });
};

export const importResource = <ThrowOnError extends boolean = false>(options: () => Options<ImportData, ThrowOnError> | undefined) => {
    return httpResource<ImportResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? importRequest(opts) : undefined;
    });
};

export const fooWowResource = <ThrowOnError extends boolean = false>(options?: () => Options<FooWowData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? fooWowRequest(opts) : undefined;
    });
};

export const apiVVersionODataControllerCountResource = <ThrowOnError extends boolean = false>(options?: () => Options<ApiVVersionODataControllerCountData, ThrowOnError> | undefined) => {
    return httpResource<ApiVVersionODataControllerCountResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? apiVVersionODataControllerCountRequest(opts) : undefined;
    });
};

export const getApiVbyApiVersionSimpleOperationResource = <ThrowOnError extends boolean = false>(options: () => Options<GetApiVbyApiVersionSimpleOperationData, ThrowOnError> | undefined) => {
    return httpResource<GetApiVbyApiVersionSimpleOperationResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? getApiVbyApiVersionSimpleOperationRequest(opts) : undefined;
    });
};

export const deleteCallWithoutParametersAndResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<DeleteCallWithoutParametersAndResponseData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? deleteCallWithoutParametersAndResponseRequest(opts) : undefined;
    });
};

export const getCallWithoutParametersAndResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<GetCallWithoutParametersAndResponseData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? getCallWithoutParametersAndResponseRequest(opts) : undefined;
    });
};

export const headCallWithoutParametersAndResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<HeadCallWithoutParametersAndResponseData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? headCallWithoutParametersAndResponseRequest(opts) : undefined;
    });
};

export const optionsCallWithoutParametersAndResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<OptionsCallWithoutParametersAndResponseData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? optionsCallWithoutParametersAndResponseRequest(opts) : undefined;
    });
};

export const patchCallWithoutParametersAndResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<PatchCallWithoutParametersAndResponseData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? patchCallWithoutParametersAndResponseRequest(opts) : undefined;
    });
};

export const postCallWithoutParametersAndResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<PostCallWithoutParametersAndResponseData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? postCallWithoutParametersAndResponseRequest(opts) : undefined;
    });
};

export const putCallWithoutParametersAndResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<PutCallWithoutParametersAndResponseData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? putCallWithoutParametersAndResponseRequest(opts) : undefined;
    });
};

export const deleteFooResource = <ThrowOnError extends boolean = false>(options: () => Options<DeleteFooData3, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? deleteFooRequest(opts) : undefined;
    });
};

export const callWithDescriptionsResource = <ThrowOnError extends boolean = false>(options?: () => Options<CallWithDescriptionsData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithDescriptionsRequest(opts) : undefined;
    });
};

/**
 * @deprecated
 */
export const deprecatedCallResource = <ThrowOnError extends boolean = false>(options: () => Options<DeprecatedCallData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? deprecatedCallRequest(opts) : undefined;
    });
};

export const callWithParametersResource = <ThrowOnError extends boolean = false>(options: () => Options<CallWithParametersData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithParametersRequest(opts) : undefined;
    });
};

export const callWithWeirdParameterNamesResource = <ThrowOnError extends boolean = false>(options: () => Options<CallWithWeirdParameterNamesData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithWeirdParameterNamesRequest(opts) : undefined;
    });
};

export const getCallWithOptionalParamResource = <ThrowOnError extends boolean = false>(options: () => Options<GetCallWithOptionalParamData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? getCallWithOptionalParamRequest(opts) : undefined;
    });
};

export const postCallWithOptionalParamResource = <ThrowOnError extends boolean = false>(options: () => Options<PostCallWithOptionalParamData, ThrowOnError> | undefined) => {
    return httpResource<PostCallWithOptionalParamResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? postCallWithOptionalParamRequest(opts) : undefined;
    });
};

export const postApiVbyApiVersionRequestBodyResource = <ThrowOnError extends boolean = false>(options?: () => Options<PostApiVbyApiVersionRequestBodyData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? postApiVbyApiVersionRequestBodyRequest(opts) : undefined;
    });
};

export const postApiVbyApiVersionFormDataResource = <ThrowOnError extends boolean = false>(options?: () => Options<PostApiVbyApiVersionFormDataData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? postApiVbyApiVersionFormDataRequest(opts) : undefined;
    });
};

export const callWithDefaultParametersResource = <ThrowOnError extends boolean = false>(options?: () => Options<CallWithDefaultParametersData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithDefaultParametersRequest(opts) : undefined;
    });
};

export const callWithDefaultOptionalParametersResource = <ThrowOnError extends boolean = false>(options?: () => Options<CallWithDefaultOptionalParametersData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithDefaultOptionalParametersRequest(opts) : undefined;
    });
};

export const callToTestOrderOfParamsResource = <ThrowOnError extends boolean = false>(options: () => Options<CallToTestOrderOfParamsData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? callToTestOrderOfParamsRequest(opts) : undefined;
    });
};

export const duplicateNameResource = <ThrowOnError extends boolean = false>(options?: () => Options<DuplicateNameData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? duplicateNameRequest(opts) : undefined;
    });
};

export const duplicateName2Resource = <ThrowOnError extends boolean = false>(options?: () => Options<DuplicateName2Data, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? duplicateName2Request(opts) : undefined;
    });
};

export const duplicateName3Resource = <ThrowOnError extends boolean = false>(options?: () => Options<DuplicateName3Data, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? duplicateName3Request(opts) : undefined;
    });
};

export const duplicateName4Resource = <ThrowOnError extends boolean = false>(options?: () => Options<DuplicateName4Data, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? duplicateName4Request(opts) : undefined;
    });
};

export const callWithNoContentResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<CallWithNoContentResponseData, ThrowOnError> | undefined) => {
    return httpResource<CallWithNoContentResponseResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithNoContentResponseRequest(opts) : undefined;
    });
};

export const callWithResponseAndNoContentResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponseAndNoContentResponseData, ThrowOnError> | undefined) => {
    return httpResource<CallWithResponseAndNoContentResponseResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithResponseAndNoContentResponseRequest(opts) : undefined;
    });
};

export const dummyAResource = <ThrowOnError extends boolean = false>(options?: () => Options<DummyAData, ThrowOnError> | undefined) => {
    return httpResource<DummyAResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? dummyARequest(opts) : undefined;
    });
};

export const dummyBResource = <ThrowOnError extends boolean = false>(options?: () => Options<DummyBData, ThrowOnError> | undefined) => {
    return httpResource<DummyBResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? dummyBRequest(opts) : undefined;
    });
};

export const callWithResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponseData, ThrowOnError> | undefined) => {
    return httpResource<CallWithResponseResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithResponseRequest(opts) : undefined;
    });
};

export const callWithDuplicateResponsesResource = <ThrowOnError extends boolean = false>(options?: () => Options<CallWithDuplicateResponsesData, ThrowOnError> | undefined) => {
    return httpResource<CallWithDuplicateResponsesResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithDuplicateResponsesRequest(opts) : undefined;
    });
};

export const callWithResponsesResource = <ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponsesData, ThrowOnError> | undefined) => {
    return httpResource<CallWithResponsesResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithResponsesRequest(opts) : undefined;
    });
};

export const collectionFormatResource = <ThrowOnError extends boolean = false>(options: () => Options<CollectionFormatData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? collectionFormatRequest(opts) : undefined;
    });
};

export const typesResource = <ThrowOnError extends boolean = false>(options: () => Options<TypesData, ThrowOnError> | undefined) => {
    return httpResource<TypesResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? typesRequest(opts) : undefined;
    });
};

export const uploadFileResource = <ThrowOnError extends boolean = false>(options: () => Options<UploadFileData, ThrowOnError> | undefined) => {
    return httpResource<UploadFileResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? uploadFileRequest(opts) : undefined;
    });
};

export const fileResponseResource = <ThrowOnError extends boolean = false>(options: () => Options<FileResponseData, ThrowOnError> | undefined) => {
    return httpResource<FileResponseResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? fileResponseRequest(opts) : undefined;
    });
};

export const complexTypesResource = <ThrowOnError extends boolean = false>(options: () => Options<ComplexTypesData, ThrowOnError> | undefined) => {
    return httpResource<ComplexTypesResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? complexTypesRequest(opts) : undefined;
    });
};

export const multipartResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<MultipartResponseData, ThrowOnError> | undefined) => {
    return httpResource<MultipartResponseResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? multipartResponseRequest(opts) : undefined;
    });
};

export const multipartRequestResource = <ThrowOnError extends boolean = false>(options?: () => Options<MultipartRequestData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? multipartRequestRequest(opts) : undefined;
    });
};

export const complexParamsResource = <ThrowOnError extends boolean = false>(options: () => Options<ComplexParamsData, ThrowOnError> | undefined) => {
    return httpResource<ComplexParamsResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? complexParamsRequest(opts) : undefined;
    });
};

export const callWithResultFromHeaderResource = <ThrowOnError extends boolean = false>(options?: () => Options<CallWithResultFromHeaderData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithResultFromHeaderRequest(opts) : undefined;
    });
};

export const testErrorCodeResource = <ThrowOnError extends boolean = false>(options: () => Options<TestErrorCodeData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? testErrorCodeRequest(opts) : undefined;
    });
};

export const nonAsciiæøåÆøÅöôêÊ字符串Resource = <ThrowOnError extends boolean = false>(options: () => Options<NonAsciiæøåÆøÅöôêÊ字符串Data, ThrowOnError> | undefined) => {
    return httpResource<NonAsciiæøåÆøÅöôêÊ字符串Response>(() => {
        const opts = options ? options() : undefined;
        return opts ? nonAsciiæøåÆøÅöôêÊ字符串Request(opts) : undefined;
    });
};

/**
 * Login User
 */
export const putWithFormUrlEncodedResource = <ThrowOnError extends boolean = false>(options: () => Options<PutWithFormUrlEncodedData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? putWithFormUrlEncodedRequest(opts) : undefined;
    });
};
