// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '../../../sdk.gen';
import type { ExportData, PatchApiVbyApiVersionNoTagData, ImportData, ImportResponse, FooWowData, ApiVVersionODataControllerCountData, ApiVVersionODataControllerCountResponse, GetApiVbyApiVersionSimpleOperationData, GetApiVbyApiVersionSimpleOperationResponse, DeleteCallWithoutParametersAndResponseData, GetCallWithoutParametersAndResponseData, HeadCallWithoutParametersAndResponseData, OptionsCallWithoutParametersAndResponseData, PatchCallWithoutParametersAndResponseData, PostCallWithoutParametersAndResponseData, PutCallWithoutParametersAndResponseData, DeleteFooData3 as DeleteFooData, CallWithDescriptionsData, DeprecatedCallData, CallWithParametersData, CallWithWeirdParameterNamesData, GetCallWithOptionalParamData, PostCallWithOptionalParamData, PostCallWithOptionalParamResponse, PostApiVbyApiVersionRequestBodyData, PostApiVbyApiVersionFormDataData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, DuplicateNameData, DuplicateName2Data, DuplicateName3Data, DuplicateName4Data, CallWithNoContentResponseData, CallWithNoContentResponseResponse, CallWithResponseAndNoContentResponseData, CallWithResponseAndNoContentResponseResponse, DummyAData, DummyAResponse, DummyBData, DummyBResponse, CallWithResponseData, CallWithResponseResponse, CallWithDuplicateResponsesData, CallWithDuplicateResponsesResponse, CallWithResponsesData, CallWithResponsesResponse, CollectionFormatData, TypesData, TypesResponse, UploadFileData, UploadFileResponse, FileResponseData, FileResponseResponse, ComplexTypesData, ComplexTypesResponse, MultipartResponseData, MultipartResponseResponse, MultipartRequestData, ComplexParamsData, ComplexParamsResponse, CallWithResultFromHeaderData, TestErrorCodeData, NonAsciiæøåÆøÅöôêÊ字符串Data, NonAsciiæøåÆøÅöôêÊ字符串Response, PutWithFormUrlEncodedData } from '../../../types.gen';
import { httpResource } from '@angular/common/http';
import { DefaultRequests, SimpleRequests, ParametersRequests, DescriptionsRequests, DeprecatedRequests, RequestBodyRequests, FormDataRequests, DefaultsRequests, DuplicateRequests, NoContentRequests, ResponseRequests, MultipleTags1Requests, CollectionFormatRequests, TypesRequests, UploadRequests, FileResponseRequests, ComplexRequests, MultipartRequests, HeaderRequests, ErrorRequests, NonAsciiÆøåÆøÅöôêÊRequests } from './requests.gen';
import { inject, Injectable } from '@angular/core';

@Injectable({
    providedIn: 'root'
})
export class DefaultResources {
    public export<ThrowOnError extends boolean = false>(options?: () => Options<ExportData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultRequests).export(opts) : undefined;
        });
    }
    
    public patchApiVbyApiVersionNoTag<ThrowOnError extends boolean = false>(options?: () => Options<PatchApiVbyApiVersionNoTagData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultRequests).patchApiVbyApiVersionNoTag(opts) : undefined;
        });
    }
    
    public import<ThrowOnError extends boolean = false>(options: () => Options<ImportData, ThrowOnError> | undefined) {
        return httpResource<ImportResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultRequests).import(opts) : undefined;
        });
    }
    
    public fooWow<ThrowOnError extends boolean = false>(options?: () => Options<FooWowData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultRequests).fooWow(opts) : undefined;
        });
    }
    
    public getApiVbyApiVersionSimpleOperation<ThrowOnError extends boolean = false>(options: () => Options<GetApiVbyApiVersionSimpleOperationData, ThrowOnError> | undefined) {
        return httpResource<GetApiVbyApiVersionSimpleOperationResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultRequests).getApiVbyApiVersionSimpleOperation(opts) : undefined;
        });
    }
}

class ODataControllerResources {
    public apiVVersionODataControllerCount<ThrowOnError extends boolean = false>(options?: () => Options<ApiVVersionODataControllerCountData, ThrowOnError> | undefined) {
        return httpResource<ApiVVersionODataControllerCountResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleRequests).api.vVersion.oDataController.apiVVersionODataControllerCount(opts) : undefined;
        });
    }
}

class VVersionResources {
    oDataController = new ODataControllerResources();
}

class ApiResources {
    vVersion = new VVersionResources();
}

@Injectable({
    providedIn: 'root'
})
export class SimpleResources {
    public deleteCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<DeleteCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleRequests).deleteCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public getCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<GetCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleRequests).getCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public headCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<HeadCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleRequests).headCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public optionsCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<OptionsCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleRequests).optionsCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public patchCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<PatchCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleRequests).patchCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public postCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<PostCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleRequests).postCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public putCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<PutCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleRequests).putCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    api = new ApiResources();
}

@Injectable({
    providedIn: 'root'
})
export class ParametersResources {
    public deleteFoo<ThrowOnError extends boolean = false>(options: () => Options<DeleteFooData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ParametersRequests).deleteFoo(opts) : undefined;
        });
    }
    
    public callWithParameters<ThrowOnError extends boolean = false>(options: () => Options<CallWithParametersData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ParametersRequests).callWithParameters(opts) : undefined;
        });
    }
    
    public callWithWeirdParameterNames<ThrowOnError extends boolean = false>(options: () => Options<CallWithWeirdParameterNamesData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ParametersRequests).callWithWeirdParameterNames(opts) : undefined;
        });
    }
    
    public getCallWithOptionalParam<ThrowOnError extends boolean = false>(options: () => Options<GetCallWithOptionalParamData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ParametersRequests).getCallWithOptionalParam(opts) : undefined;
        });
    }
    
    public postCallWithOptionalParam<ThrowOnError extends boolean = false>(options: () => Options<PostCallWithOptionalParamData, ThrowOnError> | undefined) {
        return httpResource<PostCallWithOptionalParamResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ParametersRequests).postCallWithOptionalParam(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DescriptionsResources {
    public callWithDescriptions<ThrowOnError extends boolean = false>(options?: () => Options<CallWithDescriptionsData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DescriptionsRequests).callWithDescriptions(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DeprecatedResources {
    /**
     * @deprecated
     */
    public deprecatedCall<ThrowOnError extends boolean = false>(options: () => Options<DeprecatedCallData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DeprecatedRequests).deprecatedCall(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class RequestBodyResources {
    public postApiVbyApiVersionRequestBody<ThrowOnError extends boolean = false>(options?: () => Options<PostApiVbyApiVersionRequestBodyData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(RequestBodyRequests).postApiVbyApiVersionRequestBody(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class FormDataResources {
    public postApiVbyApiVersionFormData<ThrowOnError extends boolean = false>(options?: () => Options<PostApiVbyApiVersionFormDataData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(FormDataRequests).postApiVbyApiVersionFormData(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DefaultsResources {
    public callWithDefaultParameters<ThrowOnError extends boolean = false>(options?: () => Options<CallWithDefaultParametersData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultsRequests).callWithDefaultParameters(opts) : undefined;
        });
    }
    
    public callWithDefaultOptionalParameters<ThrowOnError extends boolean = false>(options?: () => Options<CallWithDefaultOptionalParametersData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultsRequests).callWithDefaultOptionalParameters(opts) : undefined;
        });
    }
    
    public callToTestOrderOfParams<ThrowOnError extends boolean = false>(options: () => Options<CallToTestOrderOfParamsData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultsRequests).callToTestOrderOfParams(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DuplicateResources {
    public duplicateName<ThrowOnError extends boolean = false>(options?: () => Options<DuplicateNameData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DuplicateRequests).duplicateName(opts) : undefined;
        });
    }
    
    public duplicateName2<ThrowOnError extends boolean = false>(options?: () => Options<DuplicateName2Data, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DuplicateRequests).duplicateName2(opts) : undefined;
        });
    }
    
    public duplicateName3<ThrowOnError extends boolean = false>(options?: () => Options<DuplicateName3Data, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DuplicateRequests).duplicateName3(opts) : undefined;
        });
    }
    
    public duplicateName4<ThrowOnError extends boolean = false>(options?: () => Options<DuplicateName4Data, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DuplicateRequests).duplicateName4(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class NoContentResources {
    public callWithNoContentResponse<ThrowOnError extends boolean = false>(options?: () => Options<CallWithNoContentResponseData, ThrowOnError> | undefined) {
        return httpResource<CallWithNoContentResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(NoContentRequests).callWithNoContentResponse(opts) : undefined;
        });
    }
    
    public callWithResponseAndNoContentResponse<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponseAndNoContentResponseData, ThrowOnError> | undefined) {
        return httpResource<CallWithResponseAndNoContentResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseRequests).callWithResponseAndNoContentResponse(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ResponseResources {
    public callWithResponseAndNoContentResponse<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponseAndNoContentResponseData, ThrowOnError> | undefined) {
        return httpResource<CallWithResponseAndNoContentResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseRequests).callWithResponseAndNoContentResponse(opts) : undefined;
        });
    }
    
    public callWithResponse<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponseData, ThrowOnError> | undefined) {
        return httpResource<CallWithResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseRequests).callWithResponse(opts) : undefined;
        });
    }
    
    public callWithDuplicateResponses<ThrowOnError extends boolean = false>(options?: () => Options<CallWithDuplicateResponsesData, ThrowOnError> | undefined) {
        return httpResource<CallWithDuplicateResponsesResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseRequests).callWithDuplicateResponses(opts) : undefined;
        });
    }
    
    public callWithResponses<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponsesData, ThrowOnError> | undefined) {
        return httpResource<CallWithResponsesResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseRequests).callWithResponses(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags1Resources {
    public dummyA<ThrowOnError extends boolean = false>(options?: () => Options<DummyAData, ThrowOnError> | undefined) {
        return httpResource<DummyAResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1Requests).dummyA(opts) : undefined;
        });
    }
    
    public dummyB<ThrowOnError extends boolean = false>(options?: () => Options<DummyBData, ThrowOnError> | undefined) {
        return httpResource<DummyBResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1Requests).dummyB(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags2Resources {
    public dummyA<ThrowOnError extends boolean = false>(options?: () => Options<DummyAData, ThrowOnError> | undefined) {
        return httpResource<DummyAResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1Requests).dummyA(opts) : undefined;
        });
    }
    
    public dummyB<ThrowOnError extends boolean = false>(options?: () => Options<DummyBData, ThrowOnError> | undefined) {
        return httpResource<DummyBResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1Requests).dummyB(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags3Resources {
    public dummyB<ThrowOnError extends boolean = false>(options?: () => Options<DummyBData, ThrowOnError> | undefined) {
        return httpResource<DummyBResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1Requests).dummyB(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class CollectionFormatResources {
    public collectionFormat<ThrowOnError extends boolean = false>(options: () => Options<CollectionFormatData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(CollectionFormatRequests).collectionFormat(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class TypesResources {
    public types<ThrowOnError extends boolean = false>(options: () => Options<TypesData, ThrowOnError> | undefined) {
        return httpResource<TypesResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(TypesRequests).types(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class UploadResources {
    public uploadFile<ThrowOnError extends boolean = false>(options: () => Options<UploadFileData, ThrowOnError> | undefined) {
        return httpResource<UploadFileResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(UploadRequests).uploadFile(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class FileResponseResources {
    public fileResponse<ThrowOnError extends boolean = false>(options: () => Options<FileResponseData, ThrowOnError> | undefined) {
        return httpResource<FileResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(FileResponseRequests).fileResponse(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ComplexResources {
    public complexTypes<ThrowOnError extends boolean = false>(options: () => Options<ComplexTypesData, ThrowOnError> | undefined) {
        return httpResource<ComplexTypesResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ComplexRequests).complexTypes(opts) : undefined;
        });
    }
    
    public complexParams<ThrowOnError extends boolean = false>(options: () => Options<ComplexParamsData, ThrowOnError> | undefined) {
        return httpResource<ComplexParamsResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ComplexRequests).complexParams(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipartResources {
    public multipartResponse<ThrowOnError extends boolean = false>(options?: () => Options<MultipartResponseData, ThrowOnError> | undefined) {
        return httpResource<MultipartResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipartRequests).multipartResponse(opts) : undefined;
        });
    }
    
    public multipartRequest<ThrowOnError extends boolean = false>(options?: () => Options<MultipartRequestData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipartRequests).multipartRequest(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class HeaderResources {
    public callWithResultFromHeader<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResultFromHeaderData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(HeaderRequests).callWithResultFromHeader(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ErrorResources {
    public testErrorCode<ThrowOnError extends boolean = false>(options: () => Options<TestErrorCodeData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ErrorRequests).testErrorCode(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class NonAsciiÆøåÆøÅöôêÊResources {
    public nonAsciiæøåÆøÅöôêÊ字符串<ThrowOnError extends boolean = false>(options: () => Options<NonAsciiæøåÆøÅöôêÊ字符串Data, ThrowOnError> | undefined) {
        return httpResource<NonAsciiæøåÆøÅöôêÊ字符串Response>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(NonAsciiÆøåÆøÅöôêÊRequests).nonAsciiæøåÆøÅöôêÊ字符串(opts) : undefined;
        });
    }
    
    /**
     * Login User
     */
    public putWithFormUrlEncoded<ThrowOnError extends boolean = false>(options: () => Options<PutWithFormUrlEncodedData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(NonAsciiÆøåÆøÅöôêÊRequests).putWithFormUrlEncoded(opts) : undefined;
        });
    }
}
