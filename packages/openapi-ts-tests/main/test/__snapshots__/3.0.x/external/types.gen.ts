// This file is auto-generated by @hey-api/openapi-ts

export type ExternalSchemaA = _heyapi_2_;

export type ExternalSchemaB = 2;

export type ExternalSchemaC = 2;

export type ExternalSchemaPathA = 2;

export type ExternalSchemaPathB = 2;

/**
 * External schema property (A)
 */
export type ExternalSchemaPropertyA = {
    uuid1?: 3;
};

/**
 * External schema property (B) - second use of UUID
 */
export type ExternalSchemaPropertyB = {
    uuid2?: 3;
};

/**
 * External schema property (C) - third use of UUID
 */
export type ExternalSchemaPropertyC = {
    uuid3?: 3;
};

/**
 * External schema property with duplicate refs (D)
 */
export type ExternalSchemaPropertyD = {
    uuid4?: 3;
    uuid5?: 3;
};

/**
 * External schema property via external property ref (id)
 */
export type ExternalSchemaExternalProp = {
    id3?: 4;
    id4?: 4;
};

/**
 * Alias to external property via component property ref
 */
export type ExternalSchemaExternalPropAlias = {
    id5?: 4;
    id6?: 4;
};

/**
 * External double nested prop via property ref
 */
export type ExternalDoubleNestedProp = {
    deep1?: 5;
    deep2?: 5;
};

/**
 * External double nested numeric properties
 */
export type ExternalDoubleNestedNumeric = {
    numeric1?: 6;
    numeric2?: 6;
};

export type ExternalNestedObjectA = 7;

export type ExternalNestedObjectB = 7;

export type ExternalNestedNumericObjectA = 8;

export type ExternalNestedNumericObjectB = 8;

/**
 * Mixed external property references
 */
export type ExternalMixedProperties = {
    id7?: 4;
    name1?: 9;
    uuid6?: 3;
    deep3?: 5;
    numeric3?: 6;
};

/**
 * Array containing external references
 */
export type ExternalArraySchema = {
    items?: Array<2>;
    uuidItems?: Array<3>;
};

/**
 * Union type with external references
 */
export type ExternalUnionSchema = {
    id: string;
    name?: string;
} | 2 | 3;

/**
 * AllOf with external references
 */
export type ExternalAllOfSchema = 2 & {
    additional?: 3;
};

/**
 * AnyOf with external references
 */
export type ExternalAnyOfSchema = {
    inner?: {
        deep?: string;
    };
} | 7 | {
    0?: {
        1?: string;
    };
} | 8;

export type ExternalIdParam = 4;

export type ExternalUuidParam = 3;

export type ExternalDeepParam = 5;

export type ExternalNumericParam = 6;

export type ExternalModelBody = 2;

export type ExternalUuidBody = 3;

export type ExternalNestedBody = 7;

/**
 * Request body with mixed external properties
 */
export type ExternalMixedBody = {
    id?: 4;
    name?: 9;
    uuid?: 3;
    deep?: 5;
};

export type GetExternalModelData = {
    body?: never;
    path: {
        id: 4;
    };
    query?: {
        uuid?: 3;
    };
    url: '/external-model';
};

export type GetExternalModelErrors = {
    /**
     * Response using external UUID
     */
    400: 3;
};

export type GetExternalModelError = GetExternalModelErrors[keyof GetExternalModelErrors];

export type GetExternalModelResponses = {
    /**
     * Response using external model
     */
    200: 2;
};

export type GetExternalModelResponse = GetExternalModelResponses[keyof GetExternalModelResponses];

export type PostExternalModelData = {
    /**
     * Request body using external model
     */
    body: ExternalModelBody;
    path?: never;
    query?: never;
    url: '/external-model';
};

export type PostExternalModelErrors = {
    /**
     * Response with union of external types
     */
    422: 2 | 3 | 7;
};

export type PostExternalModelError = PostExternalModelErrors[keyof PostExternalModelErrors];

export type PostExternalModelResponses = {
    /**
     * Response using external model
     */
    201: 2;
};

export type PostExternalModelResponse = PostExternalModelResponses[keyof PostExternalModelResponses];

export type GetExternalUuidData = {
    body?: never;
    path?: never;
    query?: {
        uuid?: 3;
    };
    url: '/external-uuid';
};

export type GetExternalUuidResponses = {
    /**
     * Response using external UUID
     */
    200: 3;
};

export type GetExternalUuidResponse = GetExternalUuidResponses[keyof GetExternalUuidResponses];

export type PutExternalUuidData = {
    /**
     * Request body using external UUID
     */
    body?: ExternalUuidBody;
    path?: never;
    query?: never;
    url: '/external-uuid';
};

export type PutExternalUuidResponses = {
    /**
     * Response using external UUID
     */
    200: 3;
};

export type PutExternalUuidResponse = PutExternalUuidResponses[keyof PutExternalUuidResponses];

export type GetExternalNestedData = {
    body?: never;
    headers?: {
        deep?: 5;
    };
    path?: never;
    query?: never;
    url: '/external-nested';
};

export type GetExternalNestedResponses = {
    /**
     * Response using external nested object
     */
    200: 7;
};

export type GetExternalNestedResponse = GetExternalNestedResponses[keyof GetExternalNestedResponses];

export type PostExternalNestedData = {
    /**
     * Request body using external nested object
     */
    body?: ExternalNestedBody;
    path?: never;
    query?: never;
    url: '/external-nested';
};

export type PostExternalNestedResponses = {
    /**
     * Response using external nested object
     */
    201: 7;
};

export type PostExternalNestedResponse = PostExternalNestedResponses[keyof PostExternalNestedResponses];

export type GetExternalMixedData = {
    body?: never;
    headers?: {
        deep?: 5;
    };
    path: {
        id: 4;
    };
    query?: {
        uuid?: 3;
        numeric?: 6;
    };
    url: '/external-mixed';
};

export type GetExternalMixedResponses = {
    /**
     * Response with array of external models
     */
    200: Array<2>;
};

export type GetExternalMixedResponse = GetExternalMixedResponses[keyof GetExternalMixedResponses];

export type PostExternalMixedData = {
    /**
     * Request body with mixed external properties
     */
    body?: ExternalMixedBody;
    path?: never;
    query?: never;
    url: '/external-mixed';
};

export type PostExternalMixedResponses = {
    /**
     * Response using external model
     */
    201: 2;
};

export type PostExternalMixedResponse = PostExternalMixedResponses[keyof PostExternalMixedResponses];

export type GetExternalArrayData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/external-array';
};

export type GetExternalArrayResponses = {
    /**
     * Response with array of external models
     */
    200: Array<2>;
};

export type GetExternalArrayResponse = GetExternalArrayResponses[keyof GetExternalArrayResponses];

export type PostExternalArrayData = {
    body: Array<2>;
    path?: never;
    query?: never;
    url: '/external-array';
};

export type PostExternalArrayResponses = {
    /**
     * Response with array of external models
     */
    201: Array<2>;
};

export type PostExternalArrayResponse = PostExternalArrayResponses[keyof PostExternalArrayResponses];

export type GetExternalUnionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/external-union';
};

export type GetExternalUnionResponses = {
    /**
     * Response with union of external types
     */
    200: 2 | 3 | 7;
};

export type GetExternalUnionResponse = GetExternalUnionResponses[keyof GetExternalUnionResponses];

export type PostExternalUnionData = {
    body: 2 | 3 | 7;
    path?: never;
    query?: never;
    url: '/external-union';
};

export type PostExternalUnionResponses = {
    /**
     * Response with union of external types
     */
    201: 2 | 3 | 7;
};

export type PostExternalUnionResponse = PostExternalUnionResponses[keyof PostExternalUnionResponses];

export type GetExternalPropertiesByIdData = {
    body?: never;
    headers?: {
        deep?: 5;
    };
    path: {
        id: 4;
    };
    query?: {
        uuid?: 3;
    };
    url: '/external-properties/{id}';
};

export type GetExternalPropertiesByIdResponses = {
    200: {
        id?: 4;
        name?: 9;
        uuid?: 3;
        deep?: 5;
        numeric?: 6;
    };
};

export type GetExternalPropertiesByIdResponse = GetExternalPropertiesByIdResponses[keyof GetExternalPropertiesByIdResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};
