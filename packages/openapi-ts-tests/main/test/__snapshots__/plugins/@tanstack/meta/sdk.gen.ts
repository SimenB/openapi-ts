// This file is auto-generated by @hey-api/openapi-ts

import type { TDataShape, Options as Options2, Client } from './client';
import { client } from './client.gen';
import type { GetFooData, GetFooResponses, GetBarData, GetBarResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getFoo = <ThrowOnError extends boolean = false>(options?: Options<GetFooData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFooResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'foo',
                type: 'apiKey'
            }
        ],
        url: '/foo',
        ...options
    });
};

export const getBar = <ThrowOnError extends boolean = false>(options?: Options<GetBarData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBarResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'bar',
                type: 'apiKey'
            }
        ],
        url: '/bar',
        ...options
    });
};
