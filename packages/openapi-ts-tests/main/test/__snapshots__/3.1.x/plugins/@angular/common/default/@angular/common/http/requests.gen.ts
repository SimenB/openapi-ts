// This file is auto-generated by @hey-api/openapi-ts

import type { HttpRequest } from '@angular/common/http';
import type { Options } from '../../../sdk.gen';
import type { ExportData, PatchApiVbyApiVersionNoTagData, ImportData, FooWowData, ApiVVersionODataControllerCountData, GetApiVbyApiVersionSimpleOperationData, DeleteCallWithoutParametersAndResponseData, GetCallWithoutParametersAndResponseData, HeadCallWithoutParametersAndResponseData, OptionsCallWithoutParametersAndResponseData, PatchCallWithoutParametersAndResponseData, PostCallWithoutParametersAndResponseData, PutCallWithoutParametersAndResponseData, DeleteFooData3 as DeleteFooData, CallWithDescriptionsData, DeprecatedCallData, CallWithParametersData, CallWithWeirdParameterNamesData, GetCallWithOptionalParamData, PostCallWithOptionalParamData, PostApiVbyApiVersionRequestBodyData, PostApiVbyApiVersionFormDataData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, DuplicateNameData, DuplicateName2Data, DuplicateName3Data, DuplicateName4Data, CallWithNoContentResponseData, CallWithResponseAndNoContentResponseData, DummyAData, DummyBData, CallWithResponseData, CallWithDuplicateResponsesData, CallWithResponsesData, CollectionFormatData, TypesData, UploadFileData, FileResponseData, ComplexTypesData, MultipartResponseData, MultipartRequestData, ComplexParamsData, CallWithResultFromHeaderData, TestErrorCodeData, NonAsciiæøåÆøÅöôêÊ字符串Data, PutWithFormUrlEncodedData } from '../../../types.gen';
import { client } from '../../../client.gen';

export const exportRequest = <ThrowOnError extends boolean = false>(options?: Options<ExportData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/no+tag',
        ...options
    });
};

export const patchApiVbyApiVersionNoTagRequest = <ThrowOnError extends boolean = false>(options?: Options<PatchApiVbyApiVersionNoTagData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'PATCH',
        url: '/api/v{api-version}/no+tag',
        ...options
    });
};

export const importRequest = <ThrowOnError extends boolean = false>(options: Options<ImportData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/no+tag',
        ...options
    });
};

export const fooWowRequest = <ThrowOnError extends boolean = false>(options?: Options<FooWowData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'PUT',
        url: '/api/v{api-version}/no+tag',
        ...options
    });
};

export const apiVVersionODataControllerCountRequest = <ThrowOnError extends boolean = false>(options?: Options<ApiVVersionODataControllerCountData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/simple/$count',
        ...options
    });
};

export const getApiVbyApiVersionSimpleOperationRequest = <ThrowOnError extends boolean = false>(options: Options<GetApiVbyApiVersionSimpleOperationData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/simple:operation',
        ...options
    });
};

export const deleteCallWithoutParametersAndResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<DeleteCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'DELETE',
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const getCallWithoutParametersAndResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<GetCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const headCallWithoutParametersAndResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<HeadCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'HEAD',
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const optionsCallWithoutParametersAndResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<OptionsCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'OPTIONS',
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const patchCallWithoutParametersAndResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<PatchCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'PATCH',
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const postCallWithoutParametersAndResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<PostCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const putCallWithoutParametersAndResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<PutCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'PUT',
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const deleteFooRequest = <ThrowOnError extends boolean = false>(options: Options<DeleteFooData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'DELETE',
        url: '/api/v{api-version}/foo/{foo_param}/bar/{BarParam}',
        ...options
    });
};

export const callWithDescriptionsRequest = <ThrowOnError extends boolean = false>(options?: Options<CallWithDescriptionsData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/descriptions',
        ...options
    });
};

/**
 * @deprecated
 */
export const deprecatedCallRequest = <ThrowOnError extends boolean = false>(options: Options<DeprecatedCallData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/parameters/deprecated',
        ...options
    });
};

export const callWithParametersRequest = <ThrowOnError extends boolean = false>(options: Options<CallWithParametersData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/parameters/{parameterPath}',
        ...options
    });
};

export const callWithWeirdParameterNamesRequest = <ThrowOnError extends boolean = false>(options: Options<CallWithWeirdParameterNamesData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
        ...options
    });
};

export const getCallWithOptionalParamRequest = <ThrowOnError extends boolean = false>(options: Options<GetCallWithOptionalParamData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/parameters',
        ...options
    });
};

export const postCallWithOptionalParamRequest = <ThrowOnError extends boolean = false>(options: Options<PostCallWithOptionalParamData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/parameters',
        ...options
    });
};

export const postApiVbyApiVersionRequestBodyRequest = <ThrowOnError extends boolean = false>(options?: Options<PostApiVbyApiVersionRequestBodyData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/requestBody',
        ...options
    });
};

export const postApiVbyApiVersionFormDataRequest = <ThrowOnError extends boolean = false>(options?: Options<PostApiVbyApiVersionFormDataData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/formData',
        ...options
    });
};

export const callWithDefaultParametersRequest = <ThrowOnError extends boolean = false>(options?: Options<CallWithDefaultParametersData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/defaults',
        ...options
    });
};

export const callWithDefaultOptionalParametersRequest = <ThrowOnError extends boolean = false>(options?: Options<CallWithDefaultOptionalParametersData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/defaults',
        ...options
    });
};

export const callToTestOrderOfParamsRequest = <ThrowOnError extends boolean = false>(options: Options<CallToTestOrderOfParamsData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'PUT',
        url: '/api/v{api-version}/defaults',
        ...options
    });
};

export const duplicateNameRequest = <ThrowOnError extends boolean = false>(options?: Options<DuplicateNameData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'DELETE',
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const duplicateName2Request = <ThrowOnError extends boolean = false>(options?: Options<DuplicateName2Data, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const duplicateName3Request = <ThrowOnError extends boolean = false>(options?: Options<DuplicateName3Data, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const duplicateName4Request = <ThrowOnError extends boolean = false>(options?: Options<DuplicateName4Data, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'PUT',
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const callWithNoContentResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<CallWithNoContentResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/no-content',
        ...options
    });
};

export const callWithResponseAndNoContentResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<CallWithResponseAndNoContentResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/multiple-tags/response-and-no-content',
        ...options
    });
};

export const dummyARequest = <ThrowOnError extends boolean = false>(options?: Options<DummyAData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/multiple-tags/a',
        ...options
    });
};

export const dummyBRequest = <ThrowOnError extends boolean = false>(options?: Options<DummyBData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/multiple-tags/b',
        ...options
    });
};

export const callWithResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<CallWithResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/response',
        ...options
    });
};

export const callWithDuplicateResponsesRequest = <ThrowOnError extends boolean = false>(options?: Options<CallWithDuplicateResponsesData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/response',
        ...options
    });
};

export const callWithResponsesRequest = <ThrowOnError extends boolean = false>(options?: Options<CallWithResponsesData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'PUT',
        url: '/api/v{api-version}/response',
        ...options
    });
};

export const collectionFormatRequest = <ThrowOnError extends boolean = false>(options: Options<CollectionFormatData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/collectionFormat',
        ...options
    });
};

export const typesRequest = <ThrowOnError extends boolean = false>(options: Options<TypesData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/types',
        ...options
    });
};

export const uploadFileRequest = <ThrowOnError extends boolean = false>(options: Options<UploadFileData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/upload',
        ...options
    });
};

export const fileResponseRequest = <ThrowOnError extends boolean = false>(options: Options<FileResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/file/{id}',
        ...options
    });
};

export const complexTypesRequest = <ThrowOnError extends boolean = false>(options: Options<ComplexTypesData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/complex',
        ...options
    });
};

export const multipartResponseRequest = <ThrowOnError extends boolean = false>(options?: Options<MultipartResponseData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'GET',
        url: '/api/v{api-version}/multipart',
        ...options
    });
};

export const multipartRequestRequest = <ThrowOnError extends boolean = false>(options?: Options<MultipartRequestData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/multipart',
        ...options
    });
};

export const complexParamsRequest = <ThrowOnError extends boolean = false>(options: Options<ComplexParamsData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'PUT',
        url: '/api/v{api-version}/complex/{id}',
        ...options
    });
};

export const callWithResultFromHeaderRequest = <ThrowOnError extends boolean = false>(options?: Options<CallWithResultFromHeaderData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/header',
        ...options
    });
};

export const testErrorCodeRequest = <ThrowOnError extends boolean = false>(options: Options<TestErrorCodeData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/error',
        ...options
    });
};

export const nonAsciiæøåÆøÅöôêÊ字符串Request = <ThrowOnError extends boolean = false>(options: Options<NonAsciiæøåÆøÅöôêÊ字符串Data, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'POST',
        url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
        ...options
    });
};

/**
 * Login User
 */
export const putWithFormUrlEncodedRequest = <ThrowOnError extends boolean = false>(options: Options<PutWithFormUrlEncodedData, ThrowOnError>): HttpRequest<unknown> => {
    return (options?.client ?? client).requestOptions({
        responseStyle: 'data',
        method: 'PUT',
        url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
        ...options
    });
};
