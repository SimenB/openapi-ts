// This file is auto-generated by @hey-api/openapi-ts

import { type HttpRequest, httpResource } from '@angular/common/http';
import { Injectable, inject } from '@angular/core';

import { client } from '../client.gen';
import type { Options } from '../sdk.gen';
import type { ExportData, PatchApiVbyApiVersionNoTagData, ImportData, FooWowData, GetApiVbyApiVersionSimpleOperationData, ApiVVersionODataControllerCountData, DeleteCallWithoutParametersAndResponseData, GetCallWithoutParametersAndResponseData, HeadCallWithoutParametersAndResponseData, OptionsCallWithoutParametersAndResponseData, PatchCallWithoutParametersAndResponseData, PostCallWithoutParametersAndResponseData, PutCallWithoutParametersAndResponseData, DeleteFooData3, CallWithParametersData, CallWithWeirdParameterNamesData, GetCallWithOptionalParamData, PostCallWithOptionalParamData, CallWithDescriptionsData, DeprecatedCallData, PostApiVbyApiVersionRequestBodyData, PostApiVbyApiVersionFormDataData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, DuplicateNameData, DuplicateName2Data, DuplicateName3Data, DuplicateName4Data, CallWithNoContentResponseData, CallWithResponseAndNoContentResponseData, CallWithResponseData, CallWithDuplicateResponsesData, CallWithResponsesData, DummyAData, DummyBData, CollectionFormatData, TypesData, UploadFileData, FileResponseData, ComplexTypesData, ComplexParamsData, MultipartResponseData, MultipartRequestData, CallWithResultFromHeaderData, TestErrorCodeData, NonAsciiæøåÆøÅöôêÊ字符串Data, PutWithFormUrlEncodedData, ImportResponse, GetApiVbyApiVersionSimpleOperationResponse, ApiVVersionODataControllerCountResponse, PostCallWithOptionalParamResponse, CallWithNoContentResponseResponse, CallWithResponseAndNoContentResponseResponse, CallWithResponseResponse, CallWithDuplicateResponsesResponse, CallWithResponsesResponse, DummyAResponse, DummyBResponse, TypesResponse, UploadFileResponse, FileResponseResponse, ComplexTypesResponse, ComplexParamsResponse, MultipartResponseResponse, NonAsciiæøåÆøÅöôêÊ字符串Response } from '../types.gen';

@Injectable({
    providedIn: 'root'
})
export class DefaultServiceRequests {
    public export<ThrowOnError extends boolean = false>(options?: Options<ExportData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/no+tag',
            ...options
        });
    }
    
    public patchApiVbyApiVersionNoTag<ThrowOnError extends boolean = false>(options?: Options<PatchApiVbyApiVersionNoTagData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PATCH',
            url: '/api/v{api-version}/no+tag',
            ...options
        });
    }
    
    public import<ThrowOnError extends boolean = false>(options: Options<ImportData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/no+tag',
            ...options
        });
    }
    
    public fooWow<ThrowOnError extends boolean = false>(options?: Options<FooWowData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/no+tag',
            ...options
        });
    }
    
    public getApiVbyApiVersionSimpleOperation<ThrowOnError extends boolean = false>(options: Options<GetApiVbyApiVersionSimpleOperationData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/simple:operation',
            ...options
        });
    }
}

export class ODataControllerServiceRequests {
    public apiVVersionODataControllerCount<ThrowOnError extends boolean = false>(options?: Options<ApiVVersionODataControllerCountData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/simple/$count',
            ...options
        });
    }
}

export class VVersionServiceRequests {
    oDataControllerService = new ODataControllerServiceRequests();
}

export class ApiServiceRequests {
    vVersionService = new VVersionServiceRequests();
}

@Injectable({
    providedIn: 'root'
})
export class SimpleServiceRequests {
    public deleteCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<DeleteCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'DELETE',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public getCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<GetCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public headCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<HeadCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'HEAD',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public optionsCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<OptionsCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'OPTIONS',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public patchCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<PatchCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PATCH',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public postCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<PostCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public putCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<PutCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    apiService = new ApiServiceRequests();
}

@Injectable({
    providedIn: 'root'
})
export class ParametersServiceRequests {
    public deleteFoo<ThrowOnError extends boolean = false>(options: Options<DeleteFooData3, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'DELETE',
            url: '/api/v{api-version}/foo/{foo_param}/bar/{BarParam}',
            ...options
        });
    }
    
    public callWithParameters<ThrowOnError extends boolean = false>(options: Options<CallWithParametersData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            ...options
        });
    }
    
    public callWithWeirdParameterNames<ThrowOnError extends boolean = false>(options: Options<CallWithWeirdParameterNamesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            ...options
        });
    }
    
    public getCallWithOptionalParam<ThrowOnError extends boolean = false>(options: Options<GetCallWithOptionalParamData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/parameters',
            ...options
        });
    }
    
    public postCallWithOptionalParam<ThrowOnError extends boolean = false>(options: Options<PostCallWithOptionalParamData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/parameters',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DescriptionsServiceRequests {
    public callWithDescriptions<ThrowOnError extends boolean = false>(options?: Options<CallWithDescriptionsData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/descriptions',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DeprecatedServiceRequests {
    /**
     * @deprecated
     */
    public deprecatedCall<ThrowOnError extends boolean = false>(options: Options<DeprecatedCallData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/parameters/deprecated',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class RequestBodyServiceRequests {
    public postApiVbyApiVersionRequestBody<ThrowOnError extends boolean = false>(options?: Options<PostApiVbyApiVersionRequestBodyData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/requestBody',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class FormDataServiceRequests {
    public postApiVbyApiVersionFormData<ThrowOnError extends boolean = false>(options?: Options<PostApiVbyApiVersionFormDataData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/formData',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DefaultsServiceRequests {
    public callWithDefaultParameters<ThrowOnError extends boolean = false>(options?: Options<CallWithDefaultParametersData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/defaults',
            ...options
        });
    }
    
    public callWithDefaultOptionalParameters<ThrowOnError extends boolean = false>(options?: Options<CallWithDefaultOptionalParametersData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/defaults',
            ...options
        });
    }
    
    public callToTestOrderOfParams<ThrowOnError extends boolean = false>(options: Options<CallToTestOrderOfParamsData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/defaults',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DuplicateServiceRequests {
    public duplicateName<ThrowOnError extends boolean = false>(options?: Options<DuplicateNameData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'DELETE',
            url: '/api/v{api-version}/duplicate',
            ...options
        });
    }
    
    public duplicateName2<ThrowOnError extends boolean = false>(options?: Options<DuplicateName2Data, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/duplicate',
            ...options
        });
    }
    
    public duplicateName3<ThrowOnError extends boolean = false>(options?: Options<DuplicateName3Data, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/duplicate',
            ...options
        });
    }
    
    public duplicateName4<ThrowOnError extends boolean = false>(options?: Options<DuplicateName4Data, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/duplicate',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class NoContentServiceRequests {
    public callWithNoContentResponse<ThrowOnError extends boolean = false>(options?: Options<CallWithNoContentResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/no-content',
            ...options
        });
    }
    
    public callWithResponseAndNoContentResponse<ThrowOnError extends boolean = false>(options?: Options<CallWithResponseAndNoContentResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ResponseServiceRequests {
    public callWithResponseAndNoContentResponse<ThrowOnError extends boolean = false>(options?: Options<CallWithResponseAndNoContentResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
            ...options
        });
    }
    
    public callWithResponse<ThrowOnError extends boolean = false>(options?: Options<CallWithResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/response',
            ...options
        });
    }
    
    public callWithDuplicateResponses<ThrowOnError extends boolean = false>(options?: Options<CallWithDuplicateResponsesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/response',
            ...options
        });
    }
    
    public callWithResponses<ThrowOnError extends boolean = false>(options?: Options<CallWithResponsesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/response',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags1ServiceRequests {
    public dummyA<ThrowOnError extends boolean = false>(options?: Options<DummyAData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
            ...options
        });
    }
    
    public dummyB<ThrowOnError extends boolean = false>(options?: Options<DummyBData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags2ServiceRequests {
    public dummyA<ThrowOnError extends boolean = false>(options?: Options<DummyAData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
            ...options
        });
    }
    
    public dummyB<ThrowOnError extends boolean = false>(options?: Options<DummyBData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags3ServiceRequests {
    public dummyB<ThrowOnError extends boolean = false>(options?: Options<DummyBData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class CollectionFormatServiceRequests {
    public collectionFormat<ThrowOnError extends boolean = false>(options: Options<CollectionFormatData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/collectionFormat',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class TypesServiceRequests {
    public types<ThrowOnError extends boolean = false>(options: Options<TypesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/types',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class UploadServiceRequests {
    public uploadFile<ThrowOnError extends boolean = false>(options: Options<UploadFileData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/upload',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class FileResponseServiceRequests {
    public fileResponse<ThrowOnError extends boolean = false>(options: Options<FileResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/file/{id}',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ComplexServiceRequests {
    public complexTypes<ThrowOnError extends boolean = false>(options: Options<ComplexTypesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/complex',
            ...options
        });
    }
    
    public complexParams<ThrowOnError extends boolean = false>(options: Options<ComplexParamsData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/complex/{id}',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipartServiceRequests {
    public multipartResponse<ThrowOnError extends boolean = false>(options?: Options<MultipartResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multipart',
            ...options
        });
    }
    
    public multipartRequest<ThrowOnError extends boolean = false>(options?: Options<MultipartRequestData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/multipart',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class HeaderServiceRequests {
    public callWithResultFromHeader<ThrowOnError extends boolean = false>(options?: Options<CallWithResultFromHeaderData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/header',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ErrorServiceRequests {
    public testErrorCode<ThrowOnError extends boolean = false>(options: Options<TestErrorCodeData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/error',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class NonAsciiÆøåÆøÅöôêÊServiceRequests {
    public nonAsciiæøåÆøÅöôêÊ字符串<ThrowOnError extends boolean = false>(options: Options<NonAsciiæøåÆøÅöôêÊ字符串Data, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
            ...options
        });
    }
    
    /**
     * Login User
     */
    public putWithFormUrlEncoded<ThrowOnError extends boolean = false>(options: Options<PutWithFormUrlEncodedData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DefaultServiceResources {
    public export<ThrowOnError extends boolean = false>(options?: () => Options<ExportData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultServiceRequests).export(opts) : undefined;
        });
    }
    
    public patchApiVbyApiVersionNoTag<ThrowOnError extends boolean = false>(options?: () => Options<PatchApiVbyApiVersionNoTagData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultServiceRequests).patchApiVbyApiVersionNoTag(opts) : undefined;
        });
    }
    
    public import<ThrowOnError extends boolean = false>(options: () => Options<ImportData, ThrowOnError> | undefined) {
        return httpResource<ImportResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultServiceRequests).import(opts) : undefined;
        });
    }
    
    public fooWow<ThrowOnError extends boolean = false>(options?: () => Options<FooWowData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultServiceRequests).fooWow(opts) : undefined;
        });
    }
    
    public getApiVbyApiVersionSimpleOperation<ThrowOnError extends boolean = false>(options: () => Options<GetApiVbyApiVersionSimpleOperationData, ThrowOnError> | undefined) {
        return httpResource<GetApiVbyApiVersionSimpleOperationResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultServiceRequests).getApiVbyApiVersionSimpleOperation(opts) : undefined;
        });
    }
}

export class ODataControllerServiceResources {
    public apiVVersionODataControllerCount<ThrowOnError extends boolean = false>(options?: () => Options<ApiVVersionODataControllerCountData, ThrowOnError> | undefined) {
        return httpResource<ApiVVersionODataControllerCountResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).apiService.vVersionService.oDataControllerService.apiVVersionODataControllerCount(opts) : undefined;
        });
    }
}

export class VVersionServiceResources {
    oDataControllerService = new ODataControllerServiceResources();
}

export class ApiServiceResources {
    vVersionService = new VVersionServiceResources();
}

@Injectable({
    providedIn: 'root'
})
export class SimpleServiceResources {
    public deleteCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<DeleteCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).deleteCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public getCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<GetCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).getCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public headCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<HeadCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).headCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public optionsCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<OptionsCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).optionsCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public patchCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<PatchCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).patchCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public postCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<PostCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).postCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public putCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<PutCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).putCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    apiService = new ApiServiceResources();
}

@Injectable({
    providedIn: 'root'
})
export class ParametersServiceResources {
    public deleteFoo<ThrowOnError extends boolean = false>(options: () => Options<DeleteFooData3, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ParametersServiceRequests).deleteFoo(opts) : undefined;
        });
    }
    
    public callWithParameters<ThrowOnError extends boolean = false>(options: () => Options<CallWithParametersData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ParametersServiceRequests).callWithParameters(opts) : undefined;
        });
    }
    
    public callWithWeirdParameterNames<ThrowOnError extends boolean = false>(options: () => Options<CallWithWeirdParameterNamesData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ParametersServiceRequests).callWithWeirdParameterNames(opts) : undefined;
        });
    }
    
    public getCallWithOptionalParam<ThrowOnError extends boolean = false>(options: () => Options<GetCallWithOptionalParamData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ParametersServiceRequests).getCallWithOptionalParam(opts) : undefined;
        });
    }
    
    public postCallWithOptionalParam<ThrowOnError extends boolean = false>(options: () => Options<PostCallWithOptionalParamData, ThrowOnError> | undefined) {
        return httpResource<PostCallWithOptionalParamResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ParametersServiceRequests).postCallWithOptionalParam(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DescriptionsServiceResources {
    public callWithDescriptions<ThrowOnError extends boolean = false>(options?: () => Options<CallWithDescriptionsData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DescriptionsServiceRequests).callWithDescriptions(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DeprecatedServiceResources {
    /**
     * @deprecated
     */
    public deprecatedCall<ThrowOnError extends boolean = false>(options: () => Options<DeprecatedCallData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DeprecatedServiceRequests).deprecatedCall(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class RequestBodyServiceResources {
    public postApiVbyApiVersionRequestBody<ThrowOnError extends boolean = false>(options?: () => Options<PostApiVbyApiVersionRequestBodyData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(RequestBodyServiceRequests).postApiVbyApiVersionRequestBody(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class FormDataServiceResources {
    public postApiVbyApiVersionFormData<ThrowOnError extends boolean = false>(options?: () => Options<PostApiVbyApiVersionFormDataData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(FormDataServiceRequests).postApiVbyApiVersionFormData(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DefaultsServiceResources {
    public callWithDefaultParameters<ThrowOnError extends boolean = false>(options?: () => Options<CallWithDefaultParametersData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultsServiceRequests).callWithDefaultParameters(opts) : undefined;
        });
    }
    
    public callWithDefaultOptionalParameters<ThrowOnError extends boolean = false>(options?: () => Options<CallWithDefaultOptionalParametersData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultsServiceRequests).callWithDefaultOptionalParameters(opts) : undefined;
        });
    }
    
    public callToTestOrderOfParams<ThrowOnError extends boolean = false>(options: () => Options<CallToTestOrderOfParamsData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultsServiceRequests).callToTestOrderOfParams(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DuplicateServiceResources {
    public duplicateName<ThrowOnError extends boolean = false>(options?: () => Options<DuplicateNameData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DuplicateServiceRequests).duplicateName(opts) : undefined;
        });
    }
    
    public duplicateName2<ThrowOnError extends boolean = false>(options?: () => Options<DuplicateName2Data, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DuplicateServiceRequests).duplicateName2(opts) : undefined;
        });
    }
    
    public duplicateName3<ThrowOnError extends boolean = false>(options?: () => Options<DuplicateName3Data, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DuplicateServiceRequests).duplicateName3(opts) : undefined;
        });
    }
    
    public duplicateName4<ThrowOnError extends boolean = false>(options?: () => Options<DuplicateName4Data, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DuplicateServiceRequests).duplicateName4(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class NoContentServiceResources {
    public callWithNoContentResponse<ThrowOnError extends boolean = false>(options?: () => Options<CallWithNoContentResponseData, ThrowOnError> | undefined) {
        return httpResource<CallWithNoContentResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(NoContentServiceRequests).callWithNoContentResponse(opts) : undefined;
        });
    }
    
    public callWithResponseAndNoContentResponse<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponseAndNoContentResponseData, ThrowOnError> | undefined) {
        return httpResource<CallWithResponseAndNoContentResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseServiceRequests).callWithResponseAndNoContentResponse(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ResponseServiceResources {
    public callWithResponseAndNoContentResponse<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponseAndNoContentResponseData, ThrowOnError> | undefined) {
        return httpResource<CallWithResponseAndNoContentResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseServiceRequests).callWithResponseAndNoContentResponse(opts) : undefined;
        });
    }
    
    public callWithResponse<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponseData, ThrowOnError> | undefined) {
        return httpResource<CallWithResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseServiceRequests).callWithResponse(opts) : undefined;
        });
    }
    
    public callWithDuplicateResponses<ThrowOnError extends boolean = false>(options?: () => Options<CallWithDuplicateResponsesData, ThrowOnError> | undefined) {
        return httpResource<CallWithDuplicateResponsesResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseServiceRequests).callWithDuplicateResponses(opts) : undefined;
        });
    }
    
    public callWithResponses<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponsesData, ThrowOnError> | undefined) {
        return httpResource<CallWithResponsesResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseServiceRequests).callWithResponses(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags1ServiceResources {
    public dummyA<ThrowOnError extends boolean = false>(options?: () => Options<DummyAData, ThrowOnError> | undefined) {
        return httpResource<DummyAResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1ServiceRequests).dummyA(opts) : undefined;
        });
    }
    
    public dummyB<ThrowOnError extends boolean = false>(options?: () => Options<DummyBData, ThrowOnError> | undefined) {
        return httpResource<DummyBResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1ServiceRequests).dummyB(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags2ServiceResources {
    public dummyA<ThrowOnError extends boolean = false>(options?: () => Options<DummyAData, ThrowOnError> | undefined) {
        return httpResource<DummyAResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1ServiceRequests).dummyA(opts) : undefined;
        });
    }
    
    public dummyB<ThrowOnError extends boolean = false>(options?: () => Options<DummyBData, ThrowOnError> | undefined) {
        return httpResource<DummyBResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1ServiceRequests).dummyB(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags3ServiceResources {
    public dummyB<ThrowOnError extends boolean = false>(options?: () => Options<DummyBData, ThrowOnError> | undefined) {
        return httpResource<DummyBResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1ServiceRequests).dummyB(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class CollectionFormatServiceResources {
    public collectionFormat<ThrowOnError extends boolean = false>(options: () => Options<CollectionFormatData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(CollectionFormatServiceRequests).collectionFormat(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class TypesServiceResources {
    public types<ThrowOnError extends boolean = false>(options: () => Options<TypesData, ThrowOnError> | undefined) {
        return httpResource<TypesResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(TypesServiceRequests).types(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class UploadServiceResources {
    public uploadFile<ThrowOnError extends boolean = false>(options: () => Options<UploadFileData, ThrowOnError> | undefined) {
        return httpResource<UploadFileResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(UploadServiceRequests).uploadFile(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class FileResponseServiceResources {
    public fileResponse<ThrowOnError extends boolean = false>(options: () => Options<FileResponseData, ThrowOnError> | undefined) {
        return httpResource<FileResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(FileResponseServiceRequests).fileResponse(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ComplexServiceResources {
    public complexTypes<ThrowOnError extends boolean = false>(options: () => Options<ComplexTypesData, ThrowOnError> | undefined) {
        return httpResource<ComplexTypesResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ComplexServiceRequests).complexTypes(opts) : undefined;
        });
    }
    
    public complexParams<ThrowOnError extends boolean = false>(options: () => Options<ComplexParamsData, ThrowOnError> | undefined) {
        return httpResource<ComplexParamsResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ComplexServiceRequests).complexParams(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipartServiceResources {
    public multipartResponse<ThrowOnError extends boolean = false>(options?: () => Options<MultipartResponseData, ThrowOnError> | undefined) {
        return httpResource<MultipartResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipartServiceRequests).multipartResponse(opts) : undefined;
        });
    }
    
    public multipartRequest<ThrowOnError extends boolean = false>(options?: () => Options<MultipartRequestData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipartServiceRequests).multipartRequest(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class HeaderServiceResources {
    public callWithResultFromHeader<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResultFromHeaderData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(HeaderServiceRequests).callWithResultFromHeader(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ErrorServiceResources {
    public testErrorCode<ThrowOnError extends boolean = false>(options: () => Options<TestErrorCodeData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ErrorServiceRequests).testErrorCode(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class NonAsciiÆøåÆøÅöôêÊServiceResources {
    public nonAsciiæøåÆøÅöôêÊ字符串<ThrowOnError extends boolean = false>(options: () => Options<NonAsciiæøåÆøÅöôêÊ字符串Data, ThrowOnError> | undefined) {
        return httpResource<NonAsciiæøåÆøÅöôêÊ字符串Response>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(NonAsciiÆøåÆøÅöôêÊServiceRequests).nonAsciiæøåÆøÅöôêÊ字符串(opts) : undefined;
        });
    }
    
    /**
     * Login User
     */
    public putWithFormUrlEncoded<ThrowOnError extends boolean = false>(options: () => Options<PutWithFormUrlEncodedData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(NonAsciiÆøåÆøÅöôêÊServiceRequests).putWithFormUrlEncoded(opts) : undefined;
        });
    }
}
