// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '../../../sdk.gen';
import type { ExportData, PatchApiVbyApiVersionNoTagData, ImportData, ImportResponse, FooWowData, ApiVVersionODataControllerCountData, ApiVVersionODataControllerCountResponse, GetApiVbyApiVersionSimpleOperationData, GetApiVbyApiVersionSimpleOperationResponse, DeleteCallWithoutParametersAndResponseData, GetCallWithoutParametersAndResponseData, HeadCallWithoutParametersAndResponseData, OptionsCallWithoutParametersAndResponseData, PatchCallWithoutParametersAndResponseData, PostCallWithoutParametersAndResponseData, PutCallWithoutParametersAndResponseData, DeleteFooData3 as DeleteFooData, CallWithDescriptionsData, DeprecatedCallData, CallWithParametersData, CallWithWeirdParameterNamesData, GetCallWithOptionalParamData, PostCallWithOptionalParamData, PostCallWithOptionalParamResponse, PostApiVbyApiVersionRequestBodyData, PostApiVbyApiVersionFormDataData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, DuplicateNameData, DuplicateName2Data, DuplicateName3Data, DuplicateName4Data, CallWithNoContentResponseData, CallWithNoContentResponseResponse, CallWithResponseAndNoContentResponseData, CallWithResponseAndNoContentResponseResponse, DummyAData, DummyAResponse, DummyBData, DummyBResponse, CallWithResponseData, CallWithResponseResponse, CallWithDuplicateResponsesData, CallWithDuplicateResponsesResponse, CallWithResponsesData, CallWithResponsesResponse, CollectionFormatData, TypesData, TypesResponse, UploadFileData, UploadFileResponse, FileResponseData, FileResponseResponse, ComplexTypesData, ComplexTypesResponse, MultipartResponseData, MultipartResponseResponse, MultipartRequestData, ComplexParamsData, ComplexParamsResponse, CallWithResultFromHeaderData, TestErrorCodeData, NonAsciiæøåÆøÅöôêÊ字符串Data, NonAsciiæøåÆøÅöôêÊ字符串Response, PutWithFormUrlEncodedData } from '../../../types.gen';
import { httpResource } from '@angular/common/http';
import { DefaultServiceRequests, SimpleServiceRequests, ParametersServiceRequests, DescriptionsServiceRequests, DeprecatedServiceRequests, RequestBodyServiceRequests, FormDataServiceRequests, DefaultsServiceRequests, DuplicateServiceRequests, NoContentServiceRequests, ResponseServiceRequests, MultipleTags1ServiceRequests, CollectionFormatServiceRequests, TypesServiceRequests, UploadServiceRequests, FileResponseServiceRequests, ComplexServiceRequests, MultipartServiceRequests, HeaderServiceRequests, ErrorServiceRequests, NonAsciiÆøåÆøÅöôêÊServiceRequests } from './requests.gen';
import { inject, Injectable } from '@angular/core';

@Injectable({
    providedIn: 'root'
})
export class DefaultServiceResources {
    public export<ThrowOnError extends boolean = false>(options?: () => Options<ExportData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultServiceRequests).export(opts) : undefined;
        });
    }
    
    public patchApiVbyApiVersionNoTag<ThrowOnError extends boolean = false>(options?: () => Options<PatchApiVbyApiVersionNoTagData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultServiceRequests).patchApiVbyApiVersionNoTag(opts) : undefined;
        });
    }
    
    public import<ThrowOnError extends boolean = false>(options: () => Options<ImportData, ThrowOnError> | undefined) {
        return httpResource<ImportResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultServiceRequests).import(opts) : undefined;
        });
    }
    
    public fooWow<ThrowOnError extends boolean = false>(options?: () => Options<FooWowData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultServiceRequests).fooWow(opts) : undefined;
        });
    }
    
    public getApiVbyApiVersionSimpleOperation<ThrowOnError extends boolean = false>(options: () => Options<GetApiVbyApiVersionSimpleOperationData, ThrowOnError> | undefined) {
        return httpResource<GetApiVbyApiVersionSimpleOperationResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultServiceRequests).getApiVbyApiVersionSimpleOperation(opts) : undefined;
        });
    }
}

class ODataControllerServiceResources {
    public apiVVersionODataControllerCount<ThrowOnError extends boolean = false>(options?: () => Options<ApiVVersionODataControllerCountData, ThrowOnError> | undefined) {
        return httpResource<ApiVVersionODataControllerCountResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).apiService.vVersionService.oDataControllerService.apiVVersionODataControllerCount(opts) : undefined;
        });
    }
}

class VVersionServiceResources {
    oDataControllerService = new ODataControllerServiceResources();
}

class ApiServiceResources {
    vVersionService = new VVersionServiceResources();
}

@Injectable({
    providedIn: 'root'
})
export class SimpleServiceResources {
    public deleteCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<DeleteCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).deleteCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public getCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<GetCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).getCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public headCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<HeadCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).headCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public optionsCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<OptionsCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).optionsCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public patchCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<PatchCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).patchCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public postCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<PostCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).postCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public putCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<PutCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).putCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    apiService = new ApiServiceResources();
}

@Injectable({
    providedIn: 'root'
})
export class ParametersServiceResources {
    public deleteFoo<ThrowOnError extends boolean = false>(options: () => Options<DeleteFooData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ParametersServiceRequests).deleteFoo(opts) : undefined;
        });
    }
    
    public callWithParameters<ThrowOnError extends boolean = false>(options: () => Options<CallWithParametersData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ParametersServiceRequests).callWithParameters(opts) : undefined;
        });
    }
    
    public callWithWeirdParameterNames<ThrowOnError extends boolean = false>(options: () => Options<CallWithWeirdParameterNamesData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ParametersServiceRequests).callWithWeirdParameterNames(opts) : undefined;
        });
    }
    
    public getCallWithOptionalParam<ThrowOnError extends boolean = false>(options: () => Options<GetCallWithOptionalParamData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ParametersServiceRequests).getCallWithOptionalParam(opts) : undefined;
        });
    }
    
    public postCallWithOptionalParam<ThrowOnError extends boolean = false>(options: () => Options<PostCallWithOptionalParamData, ThrowOnError> | undefined) {
        return httpResource<PostCallWithOptionalParamResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ParametersServiceRequests).postCallWithOptionalParam(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DescriptionsServiceResources {
    public callWithDescriptions<ThrowOnError extends boolean = false>(options?: () => Options<CallWithDescriptionsData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DescriptionsServiceRequests).callWithDescriptions(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DeprecatedServiceResources {
    /**
     * @deprecated
     */
    public deprecatedCall<ThrowOnError extends boolean = false>(options: () => Options<DeprecatedCallData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DeprecatedServiceRequests).deprecatedCall(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class RequestBodyServiceResources {
    public postApiVbyApiVersionRequestBody<ThrowOnError extends boolean = false>(options?: () => Options<PostApiVbyApiVersionRequestBodyData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(RequestBodyServiceRequests).postApiVbyApiVersionRequestBody(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class FormDataServiceResources {
    public postApiVbyApiVersionFormData<ThrowOnError extends boolean = false>(options?: () => Options<PostApiVbyApiVersionFormDataData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(FormDataServiceRequests).postApiVbyApiVersionFormData(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DefaultsServiceResources {
    public callWithDefaultParameters<ThrowOnError extends boolean = false>(options?: () => Options<CallWithDefaultParametersData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultsServiceRequests).callWithDefaultParameters(opts) : undefined;
        });
    }
    
    public callWithDefaultOptionalParameters<ThrowOnError extends boolean = false>(options?: () => Options<CallWithDefaultOptionalParametersData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultsServiceRequests).callWithDefaultOptionalParameters(opts) : undefined;
        });
    }
    
    public callToTestOrderOfParams<ThrowOnError extends boolean = false>(options: () => Options<CallToTestOrderOfParamsData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultsServiceRequests).callToTestOrderOfParams(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DuplicateServiceResources {
    public duplicateName<ThrowOnError extends boolean = false>(options?: () => Options<DuplicateNameData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DuplicateServiceRequests).duplicateName(opts) : undefined;
        });
    }
    
    public duplicateName2<ThrowOnError extends boolean = false>(options?: () => Options<DuplicateName2Data, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DuplicateServiceRequests).duplicateName2(opts) : undefined;
        });
    }
    
    public duplicateName3<ThrowOnError extends boolean = false>(options?: () => Options<DuplicateName3Data, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DuplicateServiceRequests).duplicateName3(opts) : undefined;
        });
    }
    
    public duplicateName4<ThrowOnError extends boolean = false>(options?: () => Options<DuplicateName4Data, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DuplicateServiceRequests).duplicateName4(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class NoContentServiceResources {
    public callWithNoContentResponse<ThrowOnError extends boolean = false>(options?: () => Options<CallWithNoContentResponseData, ThrowOnError> | undefined) {
        return httpResource<CallWithNoContentResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(NoContentServiceRequests).callWithNoContentResponse(opts) : undefined;
        });
    }
    
    public callWithResponseAndNoContentResponse<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponseAndNoContentResponseData, ThrowOnError> | undefined) {
        return httpResource<CallWithResponseAndNoContentResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseServiceRequests).callWithResponseAndNoContentResponse(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ResponseServiceResources {
    public callWithResponseAndNoContentResponse<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponseAndNoContentResponseData, ThrowOnError> | undefined) {
        return httpResource<CallWithResponseAndNoContentResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseServiceRequests).callWithResponseAndNoContentResponse(opts) : undefined;
        });
    }
    
    public callWithResponse<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponseData, ThrowOnError> | undefined) {
        return httpResource<CallWithResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseServiceRequests).callWithResponse(opts) : undefined;
        });
    }
    
    public callWithDuplicateResponses<ThrowOnError extends boolean = false>(options?: () => Options<CallWithDuplicateResponsesData, ThrowOnError> | undefined) {
        return httpResource<CallWithDuplicateResponsesResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseServiceRequests).callWithDuplicateResponses(opts) : undefined;
        });
    }
    
    public callWithResponses<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponsesData, ThrowOnError> | undefined) {
        return httpResource<CallWithResponsesResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseServiceRequests).callWithResponses(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags1ServiceResources {
    public dummyA<ThrowOnError extends boolean = false>(options?: () => Options<DummyAData, ThrowOnError> | undefined) {
        return httpResource<DummyAResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1ServiceRequests).dummyA(opts) : undefined;
        });
    }
    
    public dummyB<ThrowOnError extends boolean = false>(options?: () => Options<DummyBData, ThrowOnError> | undefined) {
        return httpResource<DummyBResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1ServiceRequests).dummyB(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags2ServiceResources {
    public dummyA<ThrowOnError extends boolean = false>(options?: () => Options<DummyAData, ThrowOnError> | undefined) {
        return httpResource<DummyAResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1ServiceRequests).dummyA(opts) : undefined;
        });
    }
    
    public dummyB<ThrowOnError extends boolean = false>(options?: () => Options<DummyBData, ThrowOnError> | undefined) {
        return httpResource<DummyBResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1ServiceRequests).dummyB(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags3ServiceResources {
    public dummyB<ThrowOnError extends boolean = false>(options?: () => Options<DummyBData, ThrowOnError> | undefined) {
        return httpResource<DummyBResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1ServiceRequests).dummyB(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class CollectionFormatServiceResources {
    public collectionFormat<ThrowOnError extends boolean = false>(options: () => Options<CollectionFormatData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(CollectionFormatServiceRequests).collectionFormat(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class TypesServiceResources {
    public types<ThrowOnError extends boolean = false>(options: () => Options<TypesData, ThrowOnError> | undefined) {
        return httpResource<TypesResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(TypesServiceRequests).types(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class UploadServiceResources {
    public uploadFile<ThrowOnError extends boolean = false>(options: () => Options<UploadFileData, ThrowOnError> | undefined) {
        return httpResource<UploadFileResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(UploadServiceRequests).uploadFile(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class FileResponseServiceResources {
    public fileResponse<ThrowOnError extends boolean = false>(options: () => Options<FileResponseData, ThrowOnError> | undefined) {
        return httpResource<FileResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(FileResponseServiceRequests).fileResponse(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ComplexServiceResources {
    public complexTypes<ThrowOnError extends boolean = false>(options: () => Options<ComplexTypesData, ThrowOnError> | undefined) {
        return httpResource<ComplexTypesResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ComplexServiceRequests).complexTypes(opts) : undefined;
        });
    }
    
    public complexParams<ThrowOnError extends boolean = false>(options: () => Options<ComplexParamsData, ThrowOnError> | undefined) {
        return httpResource<ComplexParamsResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ComplexServiceRequests).complexParams(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipartServiceResources {
    public multipartResponse<ThrowOnError extends boolean = false>(options?: () => Options<MultipartResponseData, ThrowOnError> | undefined) {
        return httpResource<MultipartResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipartServiceRequests).multipartResponse(opts) : undefined;
        });
    }
    
    public multipartRequest<ThrowOnError extends boolean = false>(options?: () => Options<MultipartRequestData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipartServiceRequests).multipartRequest(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class HeaderServiceResources {
    public callWithResultFromHeader<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResultFromHeaderData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(HeaderServiceRequests).callWithResultFromHeader(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ErrorServiceResources {
    public testErrorCode<ThrowOnError extends boolean = false>(options: () => Options<TestErrorCodeData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ErrorServiceRequests).testErrorCode(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class NonAsciiÆøåÆøÅöôêÊServiceResources {
    public nonAsciiæøåÆøÅöôêÊ字符串<ThrowOnError extends boolean = false>(options: () => Options<NonAsciiæøåÆøÅöôêÊ字符串Data, ThrowOnError> | undefined) {
        return httpResource<NonAsciiæøåÆøÅöôêÊ字符串Response>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(NonAsciiÆøåÆøÅöôêÊServiceRequests).nonAsciiæøåÆøÅöôêÊ字符串(opts) : undefined;
        });
    }
    
    /**
     * Login User
     */
    public putWithFormUrlEncoded<ThrowOnError extends boolean = false>(options: () => Options<PutWithFormUrlEncodedData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(NonAsciiÆøåÆøÅöôêÊServiceRequests).putWithFormUrlEncoded(opts) : undefined;
        });
    }
}
