// This file is auto-generated by @hey-api/openapi-ts

import { defineQueryOptions, type UseMutationOptions, type _JSONValue } from '@pinia/colada';
import { export_, type Options, patchApiVbyApiVersionNoTag, import_, fooWow, apiVVersionODataControllerCount, getApiVbyApiVersionSimpleOperation, deleteCallWithoutParametersAndResponse, getCallWithoutParametersAndResponse, patchCallWithoutParametersAndResponse, postCallWithoutParametersAndResponse, putCallWithoutParametersAndResponse, deleteFoo, callWithDescriptions, deprecatedCall, callWithParameters, callWithWeirdParameterNames, getCallWithOptionalParam, postCallWithOptionalParam, postApiVbyApiVersionRequestBody, postApiVbyApiVersionFormData, callWithDefaultParameters, callWithDefaultOptionalParameters, callToTestOrderOfParams, duplicateName, duplicateName2, duplicateName3, duplicateName4, callWithNoContentResponse, callWithResponseAndNoContentResponse, dummyA, dummyB, callWithResponse, callWithDuplicateResponses, callWithResponses, collectionFormat, types, uploadFile, fileResponse, complexTypes, multipartResponse, multipartRequest, complexParams, callWithResultFromHeader, testErrorCode, nonAsciiæøåÆøÅöôêÊ字符串, putWithFormUrlEncoded } from '../sdk.gen';
import type { PatchApiVbyApiVersionNoTagData, ImportData, ImportResponse, FooWowData, GetApiVbyApiVersionSimpleOperationData, DeleteCallWithoutParametersAndResponseData, PatchCallWithoutParametersAndResponseData, PostCallWithoutParametersAndResponseData, PutCallWithoutParametersAndResponseData, DeleteFooData3, CallWithDescriptionsData, DeprecatedCallData, CallWithParametersData, CallWithWeirdParameterNamesData, GetCallWithOptionalParamData, PostCallWithOptionalParamData, PostCallWithOptionalParamResponse, PostApiVbyApiVersionRequestBodyData, PostApiVbyApiVersionFormDataData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, DuplicateNameData, DuplicateName3Data, DuplicateName4Data, CallWithDuplicateResponsesData, CallWithDuplicateResponsesError, CallWithDuplicateResponsesResponse, CallWithResponsesData, CallWithResponsesError, CallWithResponsesResponse, CollectionFormatData, TypesData, UploadFileData, UploadFileResponse, FileResponseData, ComplexTypesData, MultipartRequestData, ComplexParamsData, ComplexParamsResponse, CallWithResultFromHeaderData, TestErrorCodeData, NonAsciiæøåÆøÅöôêÊ字符串Data, NonAsciiæøåÆøÅöôêÊ字符串Response, PutWithFormUrlEncodedData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export const exportQuery = defineQueryOptions({
    key: [
        'export'
    ],
    query: async () => {
        const { data } = await export_({ throwOnError: true });
        return data;
    }
});

export const patchApiVbyApiVersionNoTagMutation = (options?: Partial<Options<PatchApiVbyApiVersionNoTagData>>): UseMutationOptions<unknown, Options<PatchApiVbyApiVersionNoTagData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await patchApiVbyApiVersionNoTag({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const importMutation = (options?: Partial<Options<ImportData>>): UseMutationOptions<ImportResponse, Options<ImportData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await import_({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const fooWowMutation = (options?: Partial<Options<FooWowData>>): UseMutationOptions<unknown, Options<FooWowData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await fooWow({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const apiVVersionODataControllerCountQuery = defineQueryOptions({
    key: [
        'apiVVersionODataControllerCount'
    ],
    query: async () => {
        const { data } = await apiVVersionODataControllerCount({ throwOnError: true });
        return data;
    }
});

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'body' | 'path'> & {
        _id: string;
        baseUrl?: _JSONValue;
        headers?: _JSONValue;
        query?: _JSONValue;
        tags?: _JSONValue;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (tags) {
        params.tags = tags as unknown as _JSONValue;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers as unknown as _JSONValue;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query as unknown as _JSONValue;
    }
    return [
        params
    ];
};

export const getApiVbyApiVersionSimpleOperationQuery = defineQueryOptions((options: Options<GetApiVbyApiVersionSimpleOperationData>) => ({
    key: createQueryKey('getApiVbyApiVersionSimpleOperation', options),
    query: async () => {
        const { data } = await getApiVbyApiVersionSimpleOperation({
            ...options,
            throwOnError: true
        });
        return data;
    }
}));

export const deleteCallWithoutParametersAndResponseMutation = (options?: Partial<Options<DeleteCallWithoutParametersAndResponseData>>): UseMutationOptions<unknown, Options<DeleteCallWithoutParametersAndResponseData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await deleteCallWithoutParametersAndResponse({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const getCallWithoutParametersAndResponseQuery = defineQueryOptions({
    key: [
        'getCallWithoutParametersAndResponse'
    ],
    query: async () => {
        const { data } = await getCallWithoutParametersAndResponse({ throwOnError: true });
        return data;
    }
});

export const patchCallWithoutParametersAndResponseMutation = (options?: Partial<Options<PatchCallWithoutParametersAndResponseData>>): UseMutationOptions<unknown, Options<PatchCallWithoutParametersAndResponseData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await patchCallWithoutParametersAndResponse({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const postCallWithoutParametersAndResponseMutation = (options?: Partial<Options<PostCallWithoutParametersAndResponseData>>): UseMutationOptions<unknown, Options<PostCallWithoutParametersAndResponseData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await postCallWithoutParametersAndResponse({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const putCallWithoutParametersAndResponseMutation = (options?: Partial<Options<PutCallWithoutParametersAndResponseData>>): UseMutationOptions<unknown, Options<PutCallWithoutParametersAndResponseData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await putCallWithoutParametersAndResponse({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const deleteFooMutation = (options?: Partial<Options<DeleteFooData3>>): UseMutationOptions<unknown, Options<DeleteFooData3>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await deleteFoo({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithDescriptionsMutation = (options?: Partial<Options<CallWithDescriptionsData>>): UseMutationOptions<unknown, Options<CallWithDescriptionsData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithDescriptions({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

/**
 * @deprecated
 */
export const deprecatedCallMutation = (options?: Partial<Options<DeprecatedCallData>>): UseMutationOptions<unknown, Options<DeprecatedCallData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await deprecatedCall({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithParametersMutation = (options?: Partial<Options<CallWithParametersData>>): UseMutationOptions<unknown, Options<CallWithParametersData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithParameters({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithWeirdParameterNamesMutation = (options?: Partial<Options<CallWithWeirdParameterNamesData>>): UseMutationOptions<unknown, Options<CallWithWeirdParameterNamesData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithWeirdParameterNames({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const getCallWithOptionalParamQuery = defineQueryOptions((options: Options<GetCallWithOptionalParamData>) => ({
    key: createQueryKey('getCallWithOptionalParam', options),
    query: async () => {
        const { data } = await getCallWithOptionalParam({
            ...options,
            throwOnError: true
        });
        return data;
    }
}));

export const postCallWithOptionalParamMutation = (options?: Partial<Options<PostCallWithOptionalParamData>>): UseMutationOptions<PostCallWithOptionalParamResponse, Options<PostCallWithOptionalParamData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await postCallWithOptionalParam({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const postApiVbyApiVersionRequestBodyMutation = (options?: Partial<Options<PostApiVbyApiVersionRequestBodyData>>): UseMutationOptions<unknown, Options<PostApiVbyApiVersionRequestBodyData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await postApiVbyApiVersionRequestBody({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const postApiVbyApiVersionFormDataMutation = (options?: Partial<Options<PostApiVbyApiVersionFormDataData>>): UseMutationOptions<unknown, Options<PostApiVbyApiVersionFormDataData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await postApiVbyApiVersionFormData({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithDefaultParametersQuery = defineQueryOptions((options?: Options<CallWithDefaultParametersData>) => ({
    key: createQueryKey('callWithDefaultParameters', options),
    query: async () => {
        const { data } = await callWithDefaultParameters({
            ...options,
            throwOnError: true
        });
        return data;
    }
}));

export const callWithDefaultOptionalParametersMutation = (options?: Partial<Options<CallWithDefaultOptionalParametersData>>): UseMutationOptions<unknown, Options<CallWithDefaultOptionalParametersData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithDefaultOptionalParameters({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callToTestOrderOfParamsMutation = (options?: Partial<Options<CallToTestOrderOfParamsData>>): UseMutationOptions<unknown, Options<CallToTestOrderOfParamsData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callToTestOrderOfParams({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const duplicateNameMutation = (options?: Partial<Options<DuplicateNameData>>): UseMutationOptions<unknown, Options<DuplicateNameData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await duplicateName({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const duplicateName2Query = defineQueryOptions({
    key: [
        'duplicateName2'
    ],
    query: async () => {
        const { data } = await duplicateName2({ throwOnError: true });
        return data;
    }
});

export const duplicateName3Mutation = (options?: Partial<Options<DuplicateName3Data>>): UseMutationOptions<unknown, Options<DuplicateName3Data>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await duplicateName3({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const duplicateName4Mutation = (options?: Partial<Options<DuplicateName4Data>>): UseMutationOptions<unknown, Options<DuplicateName4Data>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await duplicateName4({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithNoContentResponseQuery = defineQueryOptions({
    key: [
        'callWithNoContentResponse'
    ],
    query: async () => {
        const { data } = await callWithNoContentResponse({ throwOnError: true });
        return data;
    }
});

export const callWithResponseAndNoContentResponseQuery = defineQueryOptions({
    key: [
        'callWithResponseAndNoContentResponse'
    ],
    query: async () => {
        const { data } = await callWithResponseAndNoContentResponse({ throwOnError: true });
        return data;
    }
});

export const dummyAQuery = defineQueryOptions({
    key: [
        'dummyA'
    ],
    query: async () => {
        const { data } = await dummyA({ throwOnError: true });
        return data;
    }
});

export const dummyBQuery = defineQueryOptions({
    key: [
        'dummyB'
    ],
    query: async () => {
        const { data } = await dummyB({ throwOnError: true });
        return data;
    }
});

export const callWithResponseQuery = defineQueryOptions({
    key: [
        'callWithResponse'
    ],
    query: async () => {
        const { data } = await callWithResponse({ throwOnError: true });
        return data;
    }
});

export const callWithDuplicateResponsesMutation = (options?: Partial<Options<CallWithDuplicateResponsesData>>): UseMutationOptions<CallWithDuplicateResponsesResponse, Options<CallWithDuplicateResponsesData>, CallWithDuplicateResponsesError> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithDuplicateResponses({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithResponsesMutation = (options?: Partial<Options<CallWithResponsesData>>): UseMutationOptions<CallWithResponsesResponse, Options<CallWithResponsesData>, CallWithResponsesError> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithResponses({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const collectionFormatQuery = defineQueryOptions((options: Options<CollectionFormatData>) => ({
    key: createQueryKey('collectionFormat', options),
    query: async () => {
        const { data } = await collectionFormat({
            ...options,
            throwOnError: true
        });
        return data;
    }
}));

export const typesQuery = defineQueryOptions((options: Options<TypesData>) => ({
    key: createQueryKey('types', options),
    query: async () => {
        const { data } = await types({
            ...options,
            throwOnError: true
        });
        return data;
    }
}));

export const uploadFileMutation = (options?: Partial<Options<UploadFileData>>): UseMutationOptions<UploadFileResponse, Options<UploadFileData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await uploadFile({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const fileResponseQuery = defineQueryOptions((options: Options<FileResponseData>) => ({
    key: createQueryKey('fileResponse', options),
    query: async () => {
        const { data } = await fileResponse({
            ...options,
            throwOnError: true
        });
        return data;
    }
}));

export const complexTypesQuery = defineQueryOptions((options: Options<ComplexTypesData>) => ({
    key: createQueryKey('complexTypes', options),
    query: async () => {
        const { data } = await complexTypes({
            ...options,
            throwOnError: true
        });
        return data;
    }
}));

export const multipartResponseQuery = defineQueryOptions({
    key: [
        'multipartResponse'
    ],
    query: async () => {
        const { data } = await multipartResponse({ throwOnError: true });
        return data;
    }
});

export const multipartRequestMutation = (options?: Partial<Options<MultipartRequestData>>): UseMutationOptions<unknown, Options<MultipartRequestData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await multipartRequest({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const complexParamsMutation = (options?: Partial<Options<ComplexParamsData>>): UseMutationOptions<ComplexParamsResponse, Options<ComplexParamsData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await complexParams({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithResultFromHeaderMutation = (options?: Partial<Options<CallWithResultFromHeaderData>>): UseMutationOptions<unknown, Options<CallWithResultFromHeaderData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithResultFromHeader({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const testErrorCodeMutation = (options?: Partial<Options<TestErrorCodeData>>): UseMutationOptions<unknown, Options<TestErrorCodeData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await testErrorCode({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const nonAsciiæøåÆøÅöôêÊ字符串Mutation = (options?: Partial<Options<NonAsciiæøåÆøÅöôêÊ字符串Data>>): UseMutationOptions<NonAsciiæøåÆøÅöôêÊ字符串Response, Options<NonAsciiæøåÆøÅöôêÊ字符串Data>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await nonAsciiæøåÆøÅöôêÊ字符串({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

/**
 * Login User
 */
export const putWithFormUrlEncodedMutation = (options?: Partial<Options<PutWithFormUrlEncodedData>>): UseMutationOptions<unknown, Options<PutWithFormUrlEncodedData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await putWithFormUrlEncoded({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};