// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};

export type FooReadWrite = BarRead & {
    foo?: string;
};

export type FooRead = BarRead & {
    readonly foo?: string;
};

export type FooWrite = BarWrite & {
    foo?: string;
};

export type BarRead = Baz | QuxAllWrite | QuxAllRead | {
    readonly bar?: string;
};

export type BarWrite = Baz | QuxAllWrite | QuxAllRead | {
    bar?: string;
};

export type Baz = {
    baz?: string;
};

export type QuxAllWrite = {
    baz?: string;
};

export type QuxAllRead = {
    readonly baz?: string;
};

export type Quux = {
    baz?: Array<Baz>;
    qux?: QuxAllRead;
};

export type Corge = {
    foo?: {
        baz?: boolean;
    };
    bar?: {
        readonly baz?: boolean;
    };
};

export type FooReadWriteRef = {
    foo?: FooReadWrite;
    bar?: FooReadWriteRef;
};

export type FooReadWriteRef2 = FooReadWrite;

/**
 * Query parameter
 */
export type Foo = string;

/**
 * PUT /foo-write payload
 */
export type Foo2 = {
    foo?: BarRead;
};

export type PostFooReadWriteData = {
    body: FooReadWrite;
    path?: never;
    query?: never;
    url: '/foo-read-write';
};

export type PostFooReadWriteResponses = {
    /**
     * OK
     */
    200: FooReadWrite;
};

export type PostFooReadWriteResponse = PostFooReadWriteResponses[keyof PostFooReadWriteResponses];

export type PostFooReadData = {
    body: FooRead;
    path?: never;
    query?: never;
    url: '/foo-read';
};

export type PostFooReadResponses = {
    /**
     * OK
     */
    200: FooRead;
};

export type PostFooReadResponse = PostFooReadResponses[keyof PostFooReadResponses];

export type PostFooWriteData = {
    body: FooWrite;
    path?: never;
    query?: never;
    url: '/foo-write';
};

export type PostFooWriteResponses = {
    /**
     * OK
     */
    200: FooWrite;
};

export type PostFooWriteResponse = PostFooWriteResponses[keyof PostFooWriteResponses];

export type PutFooWriteData = {
    /**
     * PUT /foo-write payload
     */
    body: Foo2;
    path?: never;
    query?: {
        /**
         * Query parameter
         */
        foo?: string;
    };
    url: '/foo-write';
};

export type PutFooWriteResponses = {
    /**
     * OK
     */
    200: FooWrite;
};

export type PutFooWriteResponse = PutFooWriteResponses[keyof PutFooWriteResponses];
