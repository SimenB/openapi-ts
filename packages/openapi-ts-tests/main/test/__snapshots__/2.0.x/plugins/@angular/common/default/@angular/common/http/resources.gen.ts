// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '../../../sdk.gen';
import type { ServiceWithEmptyTagData, PatchApiVbyApiVersionNoTagData, FooWowData, DeleteCallWithoutParametersAndResponseData, GetCallWithoutParametersAndResponseData, HeadCallWithoutParametersAndResponseData, OptionsCallWithoutParametersAndResponseData, PatchCallWithoutParametersAndResponseData, PostCallWithoutParametersAndResponseData, PutCallWithoutParametersAndResponseData, CallWithDescriptionsData, CallWithParametersData, CallWithWeirdParameterNamesData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, DuplicateNameData, DuplicateName2Data, DuplicateName3Data, DuplicateName4Data, CallWithNoContentResponseData, CallWithResponseAndNoContentResponseData, CallWithResponseAndNoContentResponseResponse, DummyAData, DummyBData, CallWithResponseData, CallWithResponseResponse, CallWithDuplicateResponsesData, CallWithDuplicateResponsesResponse, CallWithResponsesData, CallWithResponsesResponse, CollectionFormatData, TypesData, TypesResponse, ComplexTypesData, ComplexTypesResponse, CallWithResultFromHeaderData, TestErrorCodeData, NonAsciiæøåÆøÅöôêÊ字符串Data, NonAsciiæøåÆøÅöôêÊ字符串Response, PostApiVbyApiVersionBodyData, PostApiVbyApiVersionBodyResponse } from '../../../types.gen';
import { httpResource } from '@angular/common/http';
import { serviceWithEmptyTagRequest, patchApiVbyApiVersionNoTagRequest, fooWowRequest, deleteCallWithoutParametersAndResponseRequest, getCallWithoutParametersAndResponseRequest, headCallWithoutParametersAndResponseRequest, optionsCallWithoutParametersAndResponseRequest, patchCallWithoutParametersAndResponseRequest, postCallWithoutParametersAndResponseRequest, putCallWithoutParametersAndResponseRequest, callWithDescriptionsRequest, callWithParametersRequest, callWithWeirdParameterNamesRequest, callWithDefaultParametersRequest, callWithDefaultOptionalParametersRequest, callToTestOrderOfParamsRequest, duplicateNameRequest, duplicateName2Request, duplicateName3Request, duplicateName4Request, callWithNoContentResponseRequest, callWithResponseAndNoContentResponseRequest, dummyARequest, dummyBRequest, callWithResponseRequest, callWithDuplicateResponsesRequest, callWithResponsesRequest, collectionFormatRequest, typesRequest, complexTypesRequest, callWithResultFromHeaderRequest, testErrorCodeRequest, nonAsciiæøåÆøÅöôêÊ字符串Request, postApiVbyApiVersionBodyRequest } from './requests.gen';

export const serviceWithEmptyTagResource = <ThrowOnError extends boolean = false>(options?: () => Options<ServiceWithEmptyTagData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? serviceWithEmptyTagRequest(opts) : undefined;
    });
};

export const patchApiVbyApiVersionNoTagResource = <ThrowOnError extends boolean = false>(options?: () => Options<PatchApiVbyApiVersionNoTagData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? patchApiVbyApiVersionNoTagRequest(opts) : undefined;
    });
};

export const fooWowResource = <ThrowOnError extends boolean = false>(options?: () => Options<FooWowData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? fooWowRequest(opts) : undefined;
    });
};

export const deleteCallWithoutParametersAndResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<DeleteCallWithoutParametersAndResponseData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? deleteCallWithoutParametersAndResponseRequest(opts) : undefined;
    });
};

export const getCallWithoutParametersAndResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<GetCallWithoutParametersAndResponseData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? getCallWithoutParametersAndResponseRequest(opts) : undefined;
    });
};

export const headCallWithoutParametersAndResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<HeadCallWithoutParametersAndResponseData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? headCallWithoutParametersAndResponseRequest(opts) : undefined;
    });
};

export const optionsCallWithoutParametersAndResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<OptionsCallWithoutParametersAndResponseData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? optionsCallWithoutParametersAndResponseRequest(opts) : undefined;
    });
};

export const patchCallWithoutParametersAndResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<PatchCallWithoutParametersAndResponseData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? patchCallWithoutParametersAndResponseRequest(opts) : undefined;
    });
};

export const postCallWithoutParametersAndResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<PostCallWithoutParametersAndResponseData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? postCallWithoutParametersAndResponseRequest(opts) : undefined;
    });
};

export const putCallWithoutParametersAndResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<PutCallWithoutParametersAndResponseData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? putCallWithoutParametersAndResponseRequest(opts) : undefined;
    });
};

export const callWithDescriptionsResource = <ThrowOnError extends boolean = false>(options?: () => Options<CallWithDescriptionsData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithDescriptionsRequest(opts) : undefined;
    });
};

export const callWithParametersResource = <ThrowOnError extends boolean = false>(options: () => Options<CallWithParametersData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithParametersRequest(opts) : undefined;
    });
};

export const callWithWeirdParameterNamesResource = <ThrowOnError extends boolean = false>(options: () => Options<CallWithWeirdParameterNamesData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithWeirdParameterNamesRequest(opts) : undefined;
    });
};

export const callWithDefaultParametersResource = <ThrowOnError extends boolean = false>(options: () => Options<CallWithDefaultParametersData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithDefaultParametersRequest(opts) : undefined;
    });
};

export const callWithDefaultOptionalParametersResource = <ThrowOnError extends boolean = false>(options?: () => Options<CallWithDefaultOptionalParametersData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithDefaultOptionalParametersRequest(opts) : undefined;
    });
};

export const callToTestOrderOfParamsResource = <ThrowOnError extends boolean = false>(options: () => Options<CallToTestOrderOfParamsData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? callToTestOrderOfParamsRequest(opts) : undefined;
    });
};

export const duplicateNameResource = <ThrowOnError extends boolean = false>(options?: () => Options<DuplicateNameData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? duplicateNameRequest(opts) : undefined;
    });
};

export const duplicateName2Resource = <ThrowOnError extends boolean = false>(options?: () => Options<DuplicateName2Data, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? duplicateName2Request(opts) : undefined;
    });
};

export const duplicateName3Resource = <ThrowOnError extends boolean = false>(options?: () => Options<DuplicateName3Data, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? duplicateName3Request(opts) : undefined;
    });
};

export const duplicateName4Resource = <ThrowOnError extends boolean = false>(options?: () => Options<DuplicateName4Data, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? duplicateName4Request(opts) : undefined;
    });
};

export const callWithNoContentResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<CallWithNoContentResponseData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithNoContentResponseRequest(opts) : undefined;
    });
};

export const callWithResponseAndNoContentResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponseAndNoContentResponseData, ThrowOnError> | undefined) => {
    return httpResource<CallWithResponseAndNoContentResponseResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithResponseAndNoContentResponseRequest(opts) : undefined;
    });
};

export const dummyAResource = <ThrowOnError extends boolean = false>(options?: () => Options<DummyAData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? dummyARequest(opts) : undefined;
    });
};

export const dummyBResource = <ThrowOnError extends boolean = false>(options?: () => Options<DummyBData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? dummyBRequest(opts) : undefined;
    });
};

export const callWithResponseResource = <ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponseData, ThrowOnError> | undefined) => {
    return httpResource<CallWithResponseResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithResponseRequest(opts) : undefined;
    });
};

export const callWithDuplicateResponsesResource = <ThrowOnError extends boolean = false>(options?: () => Options<CallWithDuplicateResponsesData, ThrowOnError> | undefined) => {
    return httpResource<CallWithDuplicateResponsesResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithDuplicateResponsesRequest(opts) : undefined;
    });
};

export const callWithResponsesResource = <ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponsesData, ThrowOnError> | undefined) => {
    return httpResource<CallWithResponsesResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithResponsesRequest(opts) : undefined;
    });
};

export const collectionFormatResource = <ThrowOnError extends boolean = false>(options: () => Options<CollectionFormatData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? collectionFormatRequest(opts) : undefined;
    });
};

export const typesResource = <ThrowOnError extends boolean = false>(options: () => Options<TypesData, ThrowOnError> | undefined) => {
    return httpResource<TypesResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? typesRequest(opts) : undefined;
    });
};

export const complexTypesResource = <ThrowOnError extends boolean = false>(options: () => Options<ComplexTypesData, ThrowOnError> | undefined) => {
    return httpResource<ComplexTypesResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? complexTypesRequest(opts) : undefined;
    });
};

export const callWithResultFromHeaderResource = <ThrowOnError extends boolean = false>(options?: () => Options<CallWithResultFromHeaderData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? callWithResultFromHeaderRequest(opts) : undefined;
    });
};

export const testErrorCodeResource = <ThrowOnError extends boolean = false>(options: () => Options<TestErrorCodeData, ThrowOnError> | undefined) => {
    return httpResource<unknown>(() => {
        const opts = options ? options() : undefined;
        return opts ? testErrorCodeRequest(opts) : undefined;
    });
};

export const nonAsciiæøåÆøÅöôêÊ字符串Resource = <ThrowOnError extends boolean = false>(options: () => Options<NonAsciiæøåÆøÅöôêÊ字符串Data, ThrowOnError> | undefined) => {
    return httpResource<NonAsciiæøåÆøÅöôêÊ字符串Response>(() => {
        const opts = options ? options() : undefined;
        return opts ? nonAsciiæøåÆøÅöôêÊ字符串Request(opts) : undefined;
    });
};

/**
 * Body should not be unknown
 * Body should not be unknown
 */
export const postApiVbyApiVersionBodyResource = <ThrowOnError extends boolean = false>(options: () => Options<PostApiVbyApiVersionBodyData, ThrowOnError> | undefined) => {
    return httpResource<PostApiVbyApiVersionBodyResponse>(() => {
        const opts = options ? options() : undefined;
        return opts ? postApiVbyApiVersionBodyRequest(opts) : undefined;
    });
};
