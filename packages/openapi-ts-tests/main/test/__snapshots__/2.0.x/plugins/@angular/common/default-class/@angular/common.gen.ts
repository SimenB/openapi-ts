// This file is auto-generated by @hey-api/openapi-ts

import { type HttpRequest, httpResource } from '@angular/common/http';
import { Injectable, inject } from '@angular/core';

import { client } from '../client.gen';
import type { Options } from '../sdk.gen';
import type { ServiceWithEmptyTagData, PatchApiVbyApiVersionNoTagData, FooWowData, PostApiVbyApiVersionBodyData, DeleteCallWithoutParametersAndResponseData, GetCallWithoutParametersAndResponseData, HeadCallWithoutParametersAndResponseData, OptionsCallWithoutParametersAndResponseData, PatchCallWithoutParametersAndResponseData, PostCallWithoutParametersAndResponseData, PutCallWithoutParametersAndResponseData, CallWithDescriptionsData, CallWithParametersData, CallWithWeirdParameterNamesData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, DuplicateNameData, DuplicateName2Data, DuplicateName3Data, DuplicateName4Data, CallWithNoContentResponseData, CallWithResponseAndNoContentResponseData, CallWithResponseData, CallWithDuplicateResponsesData, CallWithResponsesData, DummyAData, DummyBData, CollectionFormatData, TypesData, ComplexTypesData, CallWithResultFromHeaderData, TestErrorCodeData, NonAsciiæøåÆøÅöôêÊ字符串Data, PostApiVbyApiVersionBodyResponse, CallWithResponseAndNoContentResponseResponse, CallWithResponseResponse, CallWithDuplicateResponsesResponse, CallWithResponsesResponse, TypesResponse, ComplexTypesResponse, NonAsciiæøåÆøÅöôêÊ字符串Response } from '../types.gen';

@Injectable({
    providedIn: 'root'
})
export class DefaultServiceRequests {
    public serviceWithEmptyTag<ThrowOnError extends boolean = false>(options?: Options<ServiceWithEmptyTagData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/no+tag',
            ...options
        });
    }
    
    public patchApiVbyApiVersionNoTag<ThrowOnError extends boolean = false>(options?: Options<PatchApiVbyApiVersionNoTagData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PATCH',
            url: '/api/v{api-version}/no+tag',
            ...options
        });
    }
    
    public fooWow<ThrowOnError extends boolean = false>(options?: Options<FooWowData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/no+tag',
            ...options
        });
    }
    
    /**
     * Body should not be unknown
     * Body should not be unknown
     */
    public postApiVbyApiVersionBody<ThrowOnError extends boolean = false>(options: Options<PostApiVbyApiVersionBodyData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/body',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class SimpleServiceRequests {
    public deleteCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<DeleteCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'DELETE',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public getCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<GetCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public headCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<HeadCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'HEAD',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public optionsCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<OptionsCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'OPTIONS',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public patchCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<PatchCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PATCH',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public postCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<PostCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public putCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<PutCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DescriptionsServiceRequests {
    public callWithDescriptions<ThrowOnError extends boolean = false>(options?: Options<CallWithDescriptionsData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/descriptions/',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ParametersServiceRequests {
    public callWithParameters<ThrowOnError extends boolean = false>(options: Options<CallWithParametersData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            ...options
        });
    }
    
    public callWithWeirdParameterNames<ThrowOnError extends boolean = false>(options: Options<CallWithWeirdParameterNamesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DefaultsServiceRequests {
    public callWithDefaultParameters<ThrowOnError extends boolean = false>(options: Options<CallWithDefaultParametersData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/defaults',
            ...options
        });
    }
    
    public callWithDefaultOptionalParameters<ThrowOnError extends boolean = false>(options?: Options<CallWithDefaultOptionalParametersData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/defaults',
            ...options
        });
    }
    
    public callToTestOrderOfParams<ThrowOnError extends boolean = false>(options: Options<CallToTestOrderOfParamsData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/defaults',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DuplicateServiceRequests {
    public duplicateName<ThrowOnError extends boolean = false>(options?: Options<DuplicateNameData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'DELETE',
            url: '/api/v{api-version}/duplicate',
            ...options
        });
    }
    
    public duplicateName2<ThrowOnError extends boolean = false>(options?: Options<DuplicateName2Data, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/duplicate',
            ...options
        });
    }
    
    public duplicateName3<ThrowOnError extends boolean = false>(options?: Options<DuplicateName3Data, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/duplicate',
            ...options
        });
    }
    
    public duplicateName4<ThrowOnError extends boolean = false>(options?: Options<DuplicateName4Data, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/duplicate',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class NoContentServiceRequests {
    public callWithNoContentResponse<ThrowOnError extends boolean = false>(options?: Options<CallWithNoContentResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/no-content',
            ...options
        });
    }
    
    public callWithResponseAndNoContentResponse<ThrowOnError extends boolean = false>(options?: Options<CallWithResponseAndNoContentResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ResponseServiceRequests {
    public callWithResponseAndNoContentResponse<ThrowOnError extends boolean = false>(options?: Options<CallWithResponseAndNoContentResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
            ...options
        });
    }
    
    public callWithResponse<ThrowOnError extends boolean = false>(options?: Options<CallWithResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/response',
            ...options
        });
    }
    
    public callWithDuplicateResponses<ThrowOnError extends boolean = false>(options?: Options<CallWithDuplicateResponsesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/response',
            ...options
        });
    }
    
    public callWithResponses<ThrowOnError extends boolean = false>(options?: Options<CallWithResponsesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/response',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags1ServiceRequests {
    public dummyA<ThrowOnError extends boolean = false>(options?: Options<DummyAData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
            ...options
        });
    }
    
    public dummyB<ThrowOnError extends boolean = false>(options?: Options<DummyBData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags2ServiceRequests {
    public dummyA<ThrowOnError extends boolean = false>(options?: Options<DummyAData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
            ...options
        });
    }
    
    public dummyB<ThrowOnError extends boolean = false>(options?: Options<DummyBData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags3ServiceRequests {
    public dummyB<ThrowOnError extends boolean = false>(options?: Options<DummyBData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class CollectionFormatServiceRequests {
    public collectionFormat<ThrowOnError extends boolean = false>(options: Options<CollectionFormatData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/collectionFormat',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class TypesServiceRequests {
    public types<ThrowOnError extends boolean = false>(options: Options<TypesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/types',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ComplexServiceRequests {
    public complexTypes<ThrowOnError extends boolean = false>(options: Options<ComplexTypesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/complex',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class HeaderServiceRequests {
    public callWithResultFromHeader<ThrowOnError extends boolean = false>(options?: Options<CallWithResultFromHeaderData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/header',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ErrorServiceRequests {
    public testErrorCode<ThrowOnError extends boolean = false>(options: Options<TestErrorCodeData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/error',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class NonAsciiÆøåÆøÅöôêÊServiceRequests {
    public nonAsciiæøåÆøÅöôêÊ字符串<ThrowOnError extends boolean = false>(options: Options<NonAsciiæøåÆøÅöôêÊ字符串Data, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DefaultServiceResources {
    public serviceWithEmptyTag<ThrowOnError extends boolean = false>(options?: () => Options<ServiceWithEmptyTagData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultServiceRequests).serviceWithEmptyTag(opts) : undefined;
        });
    }
    
    public patchApiVbyApiVersionNoTag<ThrowOnError extends boolean = false>(options?: () => Options<PatchApiVbyApiVersionNoTagData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultServiceRequests).patchApiVbyApiVersionNoTag(opts) : undefined;
        });
    }
    
    public fooWow<ThrowOnError extends boolean = false>(options?: () => Options<FooWowData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultServiceRequests).fooWow(opts) : undefined;
        });
    }
    
    /**
     * Body should not be unknown
     * Body should not be unknown
     */
    public postApiVbyApiVersionBody<ThrowOnError extends boolean = false>(options: () => Options<PostApiVbyApiVersionBodyData, ThrowOnError> | undefined) {
        return httpResource<PostApiVbyApiVersionBodyResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultServiceRequests).postApiVbyApiVersionBody(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class SimpleServiceResources {
    public deleteCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<DeleteCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).deleteCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public getCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<GetCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).getCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public headCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<HeadCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).headCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public optionsCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<OptionsCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).optionsCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public patchCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<PatchCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).patchCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public postCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<PostCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).postCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
    
    public putCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: () => Options<PutCallWithoutParametersAndResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(SimpleServiceRequests).putCallWithoutParametersAndResponse(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DescriptionsServiceResources {
    public callWithDescriptions<ThrowOnError extends boolean = false>(options?: () => Options<CallWithDescriptionsData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DescriptionsServiceRequests).callWithDescriptions(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ParametersServiceResources {
    public callWithParameters<ThrowOnError extends boolean = false>(options: () => Options<CallWithParametersData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ParametersServiceRequests).callWithParameters(opts) : undefined;
        });
    }
    
    public callWithWeirdParameterNames<ThrowOnError extends boolean = false>(options: () => Options<CallWithWeirdParameterNamesData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ParametersServiceRequests).callWithWeirdParameterNames(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DefaultsServiceResources {
    public callWithDefaultParameters<ThrowOnError extends boolean = false>(options: () => Options<CallWithDefaultParametersData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultsServiceRequests).callWithDefaultParameters(opts) : undefined;
        });
    }
    
    public callWithDefaultOptionalParameters<ThrowOnError extends boolean = false>(options?: () => Options<CallWithDefaultOptionalParametersData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultsServiceRequests).callWithDefaultOptionalParameters(opts) : undefined;
        });
    }
    
    public callToTestOrderOfParams<ThrowOnError extends boolean = false>(options: () => Options<CallToTestOrderOfParamsData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DefaultsServiceRequests).callToTestOrderOfParams(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DuplicateServiceResources {
    public duplicateName<ThrowOnError extends boolean = false>(options?: () => Options<DuplicateNameData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DuplicateServiceRequests).duplicateName(opts) : undefined;
        });
    }
    
    public duplicateName2<ThrowOnError extends boolean = false>(options?: () => Options<DuplicateName2Data, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DuplicateServiceRequests).duplicateName2(opts) : undefined;
        });
    }
    
    public duplicateName3<ThrowOnError extends boolean = false>(options?: () => Options<DuplicateName3Data, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DuplicateServiceRequests).duplicateName3(opts) : undefined;
        });
    }
    
    public duplicateName4<ThrowOnError extends boolean = false>(options?: () => Options<DuplicateName4Data, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(DuplicateServiceRequests).duplicateName4(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class NoContentServiceResources {
    public callWithNoContentResponse<ThrowOnError extends boolean = false>(options?: () => Options<CallWithNoContentResponseData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(NoContentServiceRequests).callWithNoContentResponse(opts) : undefined;
        });
    }
    
    public callWithResponseAndNoContentResponse<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponseAndNoContentResponseData, ThrowOnError> | undefined) {
        return httpResource<CallWithResponseAndNoContentResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseServiceRequests).callWithResponseAndNoContentResponse(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ResponseServiceResources {
    public callWithResponseAndNoContentResponse<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponseAndNoContentResponseData, ThrowOnError> | undefined) {
        return httpResource<CallWithResponseAndNoContentResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseServiceRequests).callWithResponseAndNoContentResponse(opts) : undefined;
        });
    }
    
    public callWithResponse<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponseData, ThrowOnError> | undefined) {
        return httpResource<CallWithResponseResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseServiceRequests).callWithResponse(opts) : undefined;
        });
    }
    
    public callWithDuplicateResponses<ThrowOnError extends boolean = false>(options?: () => Options<CallWithDuplicateResponsesData, ThrowOnError> | undefined) {
        return httpResource<CallWithDuplicateResponsesResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseServiceRequests).callWithDuplicateResponses(opts) : undefined;
        });
    }
    
    public callWithResponses<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResponsesData, ThrowOnError> | undefined) {
        return httpResource<CallWithResponsesResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ResponseServiceRequests).callWithResponses(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags1ServiceResources {
    public dummyA<ThrowOnError extends boolean = false>(options?: () => Options<DummyAData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1ServiceRequests).dummyA(opts) : undefined;
        });
    }
    
    public dummyB<ThrowOnError extends boolean = false>(options?: () => Options<DummyBData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1ServiceRequests).dummyB(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags2ServiceResources {
    public dummyA<ThrowOnError extends boolean = false>(options?: () => Options<DummyAData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1ServiceRequests).dummyA(opts) : undefined;
        });
    }
    
    public dummyB<ThrowOnError extends boolean = false>(options?: () => Options<DummyBData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1ServiceRequests).dummyB(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags3ServiceResources {
    public dummyB<ThrowOnError extends boolean = false>(options?: () => Options<DummyBData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(MultipleTags1ServiceRequests).dummyB(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class CollectionFormatServiceResources {
    public collectionFormat<ThrowOnError extends boolean = false>(options: () => Options<CollectionFormatData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(CollectionFormatServiceRequests).collectionFormat(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class TypesServiceResources {
    public types<ThrowOnError extends boolean = false>(options: () => Options<TypesData, ThrowOnError> | undefined) {
        return httpResource<TypesResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(TypesServiceRequests).types(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ComplexServiceResources {
    public complexTypes<ThrowOnError extends boolean = false>(options: () => Options<ComplexTypesData, ThrowOnError> | undefined) {
        return httpResource<ComplexTypesResponse>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ComplexServiceRequests).complexTypes(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class HeaderServiceResources {
    public callWithResultFromHeader<ThrowOnError extends boolean = false>(options?: () => Options<CallWithResultFromHeaderData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(HeaderServiceRequests).callWithResultFromHeader(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ErrorServiceResources {
    public testErrorCode<ThrowOnError extends boolean = false>(options: () => Options<TestErrorCodeData, ThrowOnError> | undefined) {
        return httpResource<unknown>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(ErrorServiceRequests).testErrorCode(opts) : undefined;
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class NonAsciiÆøåÆøÅöôêÊServiceResources {
    public nonAsciiæøåÆøÅöôêÊ字符串<ThrowOnError extends boolean = false>(options: () => Options<NonAsciiæøåÆøÅöôêÊ字符串Data, ThrowOnError> | undefined) {
        return httpResource<NonAsciiæøåÆøÅöôêÊ字符串Response>(() => {
            const opts = options ? options() : undefined;
            return opts ? inject(NonAsciiÆøåÆøÅöôêÊServiceRequests).nonAsciiæøåÆøÅöôêÊ字符串(opts) : undefined;
        });
    }
}
