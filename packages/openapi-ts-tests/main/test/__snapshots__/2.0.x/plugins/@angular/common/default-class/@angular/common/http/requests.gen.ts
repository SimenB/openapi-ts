// This file is auto-generated by @hey-api/openapi-ts

import type { HttpRequest } from '@angular/common/http';
import type { Options } from '../../../sdk.gen';
import type { ServiceWithEmptyTagData, PatchApiVbyApiVersionNoTagData, FooWowData, DeleteCallWithoutParametersAndResponseData, GetCallWithoutParametersAndResponseData, HeadCallWithoutParametersAndResponseData, OptionsCallWithoutParametersAndResponseData, PatchCallWithoutParametersAndResponseData, PostCallWithoutParametersAndResponseData, PutCallWithoutParametersAndResponseData, CallWithDescriptionsData, CallWithParametersData, CallWithWeirdParameterNamesData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, DuplicateNameData, DuplicateName2Data, DuplicateName3Data, DuplicateName4Data, CallWithNoContentResponseData, CallWithResponseAndNoContentResponseData, DummyAData, DummyBData, CallWithResponseData, CallWithDuplicateResponsesData, CallWithResponsesData, CollectionFormatData, TypesData, ComplexTypesData, CallWithResultFromHeaderData, TestErrorCodeData, NonAsciiæøåÆøÅöôêÊ字符串Data, PostApiVbyApiVersionBodyData } from '../../../types.gen';
import { client } from '../../../client.gen';
import { Injectable } from '@angular/core';

@Injectable({
    providedIn: 'root'
})
export class DefaultServiceRequests {
    public serviceWithEmptyTag<ThrowOnError extends boolean = false>(options?: Options<ServiceWithEmptyTagData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/no+tag',
            ...options
        });
    }
    
    public patchApiVbyApiVersionNoTag<ThrowOnError extends boolean = false>(options?: Options<PatchApiVbyApiVersionNoTagData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PATCH',
            url: '/api/v{api-version}/no+tag',
            ...options
        });
    }
    
    public fooWow<ThrowOnError extends boolean = false>(options?: Options<FooWowData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/no+tag',
            ...options
        });
    }
    
    /**
     * Body should not be unknown
     * Body should not be unknown
     */
    public postApiVbyApiVersionBody<ThrowOnError extends boolean = false>(options: Options<PostApiVbyApiVersionBodyData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/body',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class SimpleServiceRequests {
    public deleteCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<DeleteCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'DELETE',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public getCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<GetCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public headCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<HeadCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'HEAD',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public optionsCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<OptionsCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'OPTIONS',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public patchCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<PatchCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PATCH',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public postCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<PostCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
    
    public putCallWithoutParametersAndResponse<ThrowOnError extends boolean = false>(options?: Options<PutCallWithoutParametersAndResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/simple',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DescriptionsServiceRequests {
    public callWithDescriptions<ThrowOnError extends boolean = false>(options?: Options<CallWithDescriptionsData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/descriptions/',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ParametersServiceRequests {
    public callWithParameters<ThrowOnError extends boolean = false>(options: Options<CallWithParametersData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            ...options
        });
    }
    
    public callWithWeirdParameterNames<ThrowOnError extends boolean = false>(options: Options<CallWithWeirdParameterNamesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DefaultsServiceRequests {
    public callWithDefaultParameters<ThrowOnError extends boolean = false>(options: Options<CallWithDefaultParametersData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/defaults',
            ...options
        });
    }
    
    public callWithDefaultOptionalParameters<ThrowOnError extends boolean = false>(options?: Options<CallWithDefaultOptionalParametersData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/defaults',
            ...options
        });
    }
    
    public callToTestOrderOfParams<ThrowOnError extends boolean = false>(options: Options<CallToTestOrderOfParamsData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/defaults',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class DuplicateServiceRequests {
    public duplicateName<ThrowOnError extends boolean = false>(options?: Options<DuplicateNameData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'DELETE',
            url: '/api/v{api-version}/duplicate',
            ...options
        });
    }
    
    public duplicateName2<ThrowOnError extends boolean = false>(options?: Options<DuplicateName2Data, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/duplicate',
            ...options
        });
    }
    
    public duplicateName3<ThrowOnError extends boolean = false>(options?: Options<DuplicateName3Data, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/duplicate',
            ...options
        });
    }
    
    public duplicateName4<ThrowOnError extends boolean = false>(options?: Options<DuplicateName4Data, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/duplicate',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class NoContentServiceRequests {
    public callWithNoContentResponse<ThrowOnError extends boolean = false>(options?: Options<CallWithNoContentResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/no-content',
            ...options
        });
    }
    
    public callWithResponseAndNoContentResponse<ThrowOnError extends boolean = false>(options?: Options<CallWithResponseAndNoContentResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ResponseServiceRequests {
    public callWithResponseAndNoContentResponse<ThrowOnError extends boolean = false>(options?: Options<CallWithResponseAndNoContentResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content',
            ...options
        });
    }
    
    public callWithResponse<ThrowOnError extends boolean = false>(options?: Options<CallWithResponseData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/response',
            ...options
        });
    }
    
    public callWithDuplicateResponses<ThrowOnError extends boolean = false>(options?: Options<CallWithDuplicateResponsesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/response',
            ...options
        });
    }
    
    public callWithResponses<ThrowOnError extends boolean = false>(options?: Options<CallWithResponsesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'PUT',
            url: '/api/v{api-version}/response',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags1ServiceRequests {
    public dummyA<ThrowOnError extends boolean = false>(options?: Options<DummyAData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
            ...options
        });
    }
    
    public dummyB<ThrowOnError extends boolean = false>(options?: Options<DummyBData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags2ServiceRequests {
    public dummyA<ThrowOnError extends boolean = false>(options?: Options<DummyAData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
            ...options
        });
    }
    
    public dummyB<ThrowOnError extends boolean = false>(options?: Options<DummyBData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags3ServiceRequests {
    public dummyB<ThrowOnError extends boolean = false>(options?: Options<DummyBData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class CollectionFormatServiceRequests {
    public collectionFormat<ThrowOnError extends boolean = false>(options: Options<CollectionFormatData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/collectionFormat',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class TypesServiceRequests {
    public types<ThrowOnError extends boolean = false>(options: Options<TypesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/types',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ComplexServiceRequests {
    public complexTypes<ThrowOnError extends boolean = false>(options: Options<ComplexTypesData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'GET',
            url: '/api/v{api-version}/complex',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class HeaderServiceRequests {
    public callWithResultFromHeader<ThrowOnError extends boolean = false>(options?: Options<CallWithResultFromHeaderData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/header',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class ErrorServiceRequests {
    public testErrorCode<ThrowOnError extends boolean = false>(options: Options<TestErrorCodeData, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/error',
            ...options
        });
    }
}

@Injectable({
    providedIn: 'root'
})
export class NonAsciiÆøåÆøÅöôêÊServiceRequests {
    public nonAsciiæøåÆøÅöôêÊ字符串<ThrowOnError extends boolean = false>(options: Options<NonAsciiæøåÆøÅöôêÊ字符串Data, ThrowOnError>): HttpRequest<unknown> {
        return (options?.client ?? client).requestOptions({
            responseStyle: 'data',
            method: 'POST',
            url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
            ...options
        });
    }
}
