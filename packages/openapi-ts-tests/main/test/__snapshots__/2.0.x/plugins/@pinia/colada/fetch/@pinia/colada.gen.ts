// This file is auto-generated by @hey-api/openapi-ts

import { type Options, serviceWithEmptyTag, patchApiVbyApiVersionNoTag, fooWow, deleteCallWithoutParametersAndResponse, getCallWithoutParametersAndResponse, patchCallWithoutParametersAndResponse, postCallWithoutParametersAndResponse, putCallWithoutParametersAndResponse, callWithDescriptions, callWithParameters, callWithWeirdParameterNames, callWithDefaultParameters, callWithDefaultOptionalParameters, callToTestOrderOfParams, duplicateName, duplicateName2, duplicateName3, duplicateName4, callWithNoContentResponse, callWithResponseAndNoContentResponse, dummyA, dummyB, callWithResponse, callWithDuplicateResponses, callWithResponses, collectionFormat, types, complexTypes, callWithResultFromHeader, testErrorCode, nonAsciiæøåÆøÅöôêÊ字符串, postApiVbyApiVersionBody } from '../sdk.gen';
import { type UseQueryOptions, defineQueryOptions, type UseMutationOptions } from '@pinia/colada';
import type { ServiceWithEmptyTagData, PatchApiVbyApiVersionNoTagData, FooWowData, DeleteCallWithoutParametersAndResponseData, GetCallWithoutParametersAndResponseData, PatchCallWithoutParametersAndResponseData, PostCallWithoutParametersAndResponseData, PutCallWithoutParametersAndResponseData, CallWithDescriptionsData, CallWithParametersData, CallWithWeirdParameterNamesData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, DuplicateNameData, DuplicateName2Data, DuplicateName3Data, DuplicateName4Data, CallWithNoContentResponseData, CallWithResponseAndNoContentResponseData, DummyAData, DummyBData, CallWithResponseData, CallWithDuplicateResponsesData, CallWithDuplicateResponsesError, CallWithDuplicateResponsesResponse, CallWithResponsesData, CallWithResponsesError, CallWithResponsesResponse, CollectionFormatData, TypesData, ComplexTypesData, CallWithResultFromHeaderData, TestErrorCodeData, NonAsciiæøåÆøÅöôêÊ字符串Data, NonAsciiæøåÆøÅöôêÊ字符串Response, PostApiVbyApiVersionBodyData, PostApiVbyApiVersionBodyError, PostApiVbyApiVersionBodyResponse } from '../types.gen';
import { client } from '../client.gen';

export const serviceWithEmptyTagQuery = defineQueryOptions({
    key: [
        'serviceWithEmptyTag'
    ],
    query: async () => {
        const { data } = await serviceWithEmptyTag({ throwOnError: true });
        return data;
    }
});

export const patchApiVbyApiVersionNoTagMutation = (options?: Partial<Options<PatchApiVbyApiVersionNoTagData>>): UseMutationOptions<unknown, Options<PatchApiVbyApiVersionNoTagData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await patchApiVbyApiVersionNoTag({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const fooWowMutation = (options?: Partial<Options<FooWowData>>): UseMutationOptions<unknown, Options<FooWowData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await fooWow({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const deleteCallWithoutParametersAndResponseMutation = (options?: Partial<Options<DeleteCallWithoutParametersAndResponseData>>): UseMutationOptions<unknown, Options<DeleteCallWithoutParametersAndResponseData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await deleteCallWithoutParametersAndResponse({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const getCallWithoutParametersAndResponseQuery = defineQueryOptions({
    key: [
        'getCallWithoutParametersAndResponse'
    ],
    query: async () => {
        const { data } = await getCallWithoutParametersAndResponse({ throwOnError: true });
        return data;
    }
});

export const patchCallWithoutParametersAndResponseMutation = (options?: Partial<Options<PatchCallWithoutParametersAndResponseData>>): UseMutationOptions<unknown, Options<PatchCallWithoutParametersAndResponseData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await patchCallWithoutParametersAndResponse({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const postCallWithoutParametersAndResponseMutation = (options?: Partial<Options<PostCallWithoutParametersAndResponseData>>): UseMutationOptions<unknown, Options<PostCallWithoutParametersAndResponseData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await postCallWithoutParametersAndResponse({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const putCallWithoutParametersAndResponseMutation = (options?: Partial<Options<PutCallWithoutParametersAndResponseData>>): UseMutationOptions<unknown, Options<PutCallWithoutParametersAndResponseData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await putCallWithoutParametersAndResponse({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithDescriptionsMutation = (options?: Partial<Options<CallWithDescriptionsData>>): UseMutationOptions<unknown, Options<CallWithDescriptionsData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithDescriptions({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithParametersMutation = (options?: Partial<Options<CallWithParametersData>>): UseMutationOptions<unknown, Options<CallWithParametersData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithParameters({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithWeirdParameterNamesMutation = (options?: Partial<Options<CallWithWeirdParameterNamesData>>): UseMutationOptions<unknown, Options<CallWithWeirdParameterNamesData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithWeirdParameterNames({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithDefaultParametersQueryKey = (options: Options<CallWithDefaultParametersData>) => _heyapi_187_('callWithDefaultParameters', options);

export const callWithDefaultParametersQuery = defineQueryOptions((options: Options<CallWithDefaultParametersData>) => ({
    key: callWithDefaultParametersQueryKey(options),
    query: async () => {
        const { data } = await callWithDefaultParameters({
            ...options,
            throwOnError: true
        });
        return data;
    }
}));

export const callWithDefaultOptionalParametersMutation = (options?: Partial<Options<CallWithDefaultOptionalParametersData>>): UseMutationOptions<unknown, Options<CallWithDefaultOptionalParametersData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithDefaultOptionalParameters({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callToTestOrderOfParamsMutation = (options?: Partial<Options<CallToTestOrderOfParamsData>>): UseMutationOptions<unknown, Options<CallToTestOrderOfParamsData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callToTestOrderOfParams({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const duplicateNameMutation = (options?: Partial<Options<DuplicateNameData>>): UseMutationOptions<unknown, Options<DuplicateNameData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await duplicateName({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const duplicateName2Query = defineQueryOptions({
    key: [
        'duplicateName2'
    ],
    query: async () => {
        const { data } = await duplicateName2({ throwOnError: true });
        return data;
    }
});

export const duplicateName3Mutation = (options?: Partial<Options<DuplicateName3Data>>): UseMutationOptions<unknown, Options<DuplicateName3Data>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await duplicateName3({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const duplicateName4Mutation = (options?: Partial<Options<DuplicateName4Data>>): UseMutationOptions<unknown, Options<DuplicateName4Data>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await duplicateName4({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithNoContentResponseQuery = defineQueryOptions({
    key: [
        'callWithNoContentResponse'
    ],
    query: async () => {
        const { data } = await callWithNoContentResponse({ throwOnError: true });
        return data;
    }
});

export const callWithResponseAndNoContentResponseQuery = defineQueryOptions({
    key: [
        'callWithResponseAndNoContentResponse'
    ],
    query: async () => {
        const { data } = await callWithResponseAndNoContentResponse({ throwOnError: true });
        return data;
    }
});

export const dummyAQuery = defineQueryOptions({
    key: [
        'dummyA'
    ],
    query: async () => {
        const { data } = await dummyA({ throwOnError: true });
        return data;
    }
});

export const dummyBQuery = defineQueryOptions({
    key: [
        'dummyB'
    ],
    query: async () => {
        const { data } = await dummyB({ throwOnError: true });
        return data;
    }
});

export const callWithResponseQuery = defineQueryOptions({
    key: [
        'callWithResponse'
    ],
    query: async () => {
        const { data } = await callWithResponse({ throwOnError: true });
        return data;
    }
});

export const callWithDuplicateResponsesMutation = (options?: Partial<Options<CallWithDuplicateResponsesData>>): UseMutationOptions<CallWithDuplicateResponsesResponse, Options<CallWithDuplicateResponsesData>, CallWithDuplicateResponsesError> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithDuplicateResponses({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const callWithResponsesMutation = (options?: Partial<Options<CallWithResponsesData>>): UseMutationOptions<CallWithResponsesResponse, Options<CallWithResponsesData>, CallWithResponsesError> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithResponses({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const collectionFormatQueryKey = (options: Options<CollectionFormatData>) => 2('collectionFormat', options);

export const collectionFormatQuery = defineQueryOptions((options: Options<CollectionFormatData>) => ({
    key: collectionFormatQueryKey(options),
    query: async () => {
        const { data } = await collectionFormat({
            ...options,
            throwOnError: true
        });
        return data;
    }
}));

export const typesQueryKey = (options: Options<TypesData>) => 2('types', options);

export const typesQuery = defineQueryOptions((options: Options<TypesData>) => ({
    key: typesQueryKey(options),
    query: async () => {
        const { data } = await types({
            ...options,
            throwOnError: true
        });
        return data;
    }
}));

export const complexTypesQueryKey = (options: Options<ComplexTypesData>) => 2('complexTypes', options);

export const complexTypesQuery = defineQueryOptions((options: Options<ComplexTypesData>) => ({
    key: complexTypesQueryKey(options),
    query: async () => {
        const { data } = await complexTypes({
            ...options,
            throwOnError: true
        });
        return data;
    }
}));

export const callWithResultFromHeaderMutation = (options?: Partial<Options<CallWithResultFromHeaderData>>): UseMutationOptions<unknown, Options<CallWithResultFromHeaderData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await callWithResultFromHeader({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const testErrorCodeMutation = (options?: Partial<Options<TestErrorCodeData>>): UseMutationOptions<unknown, Options<TestErrorCodeData>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await testErrorCode({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

export const nonAsciiæøåÆøÅöôêÊ字符串Mutation = (options?: Partial<Options<NonAsciiæøåÆøÅöôêÊ字符串Data>>): UseMutationOptions<NonAsciiæøåÆøÅöôêÊ字符串Response, Options<NonAsciiæøåÆøÅöôêÊ字符串Data>, Error> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await nonAsciiæøåÆøÅöôêÊ字符串({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};

/**
 * Body should not be unknown
 * Body should not be unknown
 */
export const postApiVbyApiVersionBodyMutation = (options?: Partial<Options<PostApiVbyApiVersionBodyData>>): UseMutationOptions<PostApiVbyApiVersionBodyResponse, Options<PostApiVbyApiVersionBodyData>, PostApiVbyApiVersionBodyError> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await postApiVbyApiVersionBody({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};
