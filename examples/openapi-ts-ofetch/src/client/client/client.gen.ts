// This file is auto-generated by @hey-api/openapi-ts

import { ofetch, type ResponseType as OfetchResponseType } from 'ofetch';

import { createSseClient } from '../core/serverSentEvents.gen';
import type { HttpMethod } from '../core/types.gen';
import { getValidRequestBody } from '../core/utils.gen';
import type {
  Client,
  Config,
  RequestOptions,
  ResolvedRequestOptions,
} from './types.gen';
import {
  buildOfetchOptions,
  buildUrl,
  createConfig,
  createInterceptors,
  isRepeatableBody,
  mapParseAsToResponseType,
  mergeConfigs,
  mergeHeaders,
  parseError,
  parseSuccess,
  setAuthParams,
  wrapDataReturn,
  wrapErrorReturn,
} from './utils.gen';

type ReqInit = Omit<RequestInit, 'body' | 'headers'> & {
  body?: any;
  headers: ReturnType<typeof mergeHeaders>;
};

export const createClient = (config: Config = {}): Client => {
  let _config = mergeConfigs(createConfig(), config);

  const getConfig = (): Config => ({ ..._config });

  const setConfig = (config: Config): Config => {
    _config = mergeConfigs(_config, config);
    return getConfig();
  };

  const interceptors = createInterceptors<
    Request,
    Response,
    unknown,
    ResolvedRequestOptions
  >();

  const beforeRequest = async (options: RequestOptions) => {
    const opts = {
      ..._config,
      ...options,
      headers: mergeHeaders(_config.headers, options.headers),
      serializedBody: undefined,
    };

    if (opts.security) {
      await setAuthParams({
        ...opts,
        security: opts.security,
      });
    }

    if (opts.requestValidator) {
      await opts.requestValidator(opts);
    }

    if (opts.body !== undefined && opts.bodySerializer) {
      opts.serializedBody = opts.bodySerializer(opts.body);
    }

    // remove Content-Type header if body is empty to avoid sending invalid requests
    if (opts.body === undefined || opts.serializedBody === '') {
      opts.headers.delete('Content-Type');
    }

    // Precompute network body for retries and consistent handling
    const networkBody = getValidRequestBody(opts) as
      | RequestInit['body']
      | null
      | undefined;

    const url = buildUrl(opts);

    return { networkBody, opts, url };
  };

  const request: Client['request'] = async (options) => {
    const {
      networkBody: initialNetworkBody,
      opts,
      url,
    } = await beforeRequest(options as any);
    // Compute response type mapping once
    const ofetchResponseType: OfetchResponseType | undefined =
      mapParseAsToResponseType(opts.parseAs, opts.responseType);

    const $ofetch = opts.ofetch ?? ofetch;

    // Always create Request pre-network (align with client-fetch)
    let networkBody = initialNetworkBody;
    const requestInit: ReqInit = {
      body: networkBody,
      headers: opts.headers as Headers,
      method: opts.method,
      redirect: 'follow',
      signal: opts.signal,
    };
    let request = new Request(url, requestInit);

    for (const fn of interceptors.request.fns) {
      if (fn) {
        request = await fn(request, opts);
      }
    }

    // Reflect any interceptor changes into opts used for network and downstream
    opts.headers = request.headers;
    opts.method = request.method as Uppercase<HttpMethod>;
    // Attempt to reflect possible signal/body changes (safely)

    const reqBody = (request as any).body as unknown;
    let effectiveRetry = opts.retry;
    if (reqBody !== undefined && reqBody !== null) {
      if (isRepeatableBody(reqBody)) {
        networkBody = reqBody as BodyInit;
      } else {
        networkBody = reqBody as BodyInit;
        // Disable retries for non-repeatable bodies
        effectiveRetry = 0 as any;
      }
    }

    opts.signal = (request as any).signal as AbortSignal | undefined;
    const finalUrl = request.url;

    // Build ofetch options and perform the request
    const responseOptions = buildOfetchOptions(
      opts as ResolvedRequestOptions,
      networkBody ?? undefined,
      effectiveRetry as any,
    );

    let response = await $ofetch.raw(finalUrl, responseOptions);

    for (const fn of interceptors.response.fns) {
      if (fn) {
        response = await fn(response, request, opts);
      }
    }

    const result = { request, response };

    if (response.ok) {
      const data = await parseSuccess(response, opts, ofetchResponseType);
      return wrapDataReturn(data, result, opts.responseStyle);
    }

    let finalError = await parseError(response);

    for (const fn of interceptors.error.fns) {
      if (fn) {
        finalError = await fn(finalError, response, request, opts);
      }
    }

    // Ensure error is never undefined after interceptors
    finalError = (finalError as any) || ({} as string);

    if (opts.throwOnError) {
      throw finalError;
    }

    return wrapErrorReturn(finalError, result, opts.responseStyle) as any;
  };

  const makeMethodFn =
    (method: Uppercase<HttpMethod>) => (options: RequestOptions) =>
      request({ ...options, method } as any);

  const makeSseFn =
    (method: Uppercase<HttpMethod>) => async (options: RequestOptions) => {
      const { networkBody, opts, url } = await beforeRequest(options);
      const optsForSse: any = { ...opts };
      delete optsForSse.body;
      return createSseClient({
        ...optsForSse,
        fetch: opts.fetch,
        headers: opts.headers as Headers,
        method,
        onRequest: async (url, init) => {
          let request = new Request(url, init);
          for (const fn of interceptors.request.fns) {
            if (fn) {
              request = await fn(request, opts);
            }
          }
          return request;
        },
        serializedBody: networkBody as BodyInit | null | undefined,
        signal: opts.signal,
        url,
      });
    };

  return {
    buildUrl,
    connect: makeMethodFn('CONNECT'),
    delete: makeMethodFn('DELETE'),
    get: makeMethodFn('GET'),
    getConfig,
    head: makeMethodFn('HEAD'),
    interceptors,
    options: makeMethodFn('OPTIONS'),
    patch: makeMethodFn('PATCH'),
    post: makeMethodFn('POST'),
    put: makeMethodFn('PUT'),
    request,
    setConfig,
    sse: {
      connect: makeSseFn('CONNECT'),
      delete: makeSseFn('DELETE'),
      get: makeSseFn('GET'),
      head: makeSseFn('HEAD'),
      options: makeSseFn('OPTIONS'),
      patch: makeSseFn('PATCH'),
      post: makeSseFn('POST'),
      put: makeSseFn('PUT'),
      trace: makeSseFn('TRACE'),
    },
    trace: makeMethodFn('TRACE'),
  } as Client;
};
